
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  000036ec  00003780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800108  00800108  00003828  2**0
                  ALLOC
  3 .stab         00002f70  00000000  00000000  00003828  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001234  00000000  00000000  00006798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000079cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000098c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b560  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b94d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c11b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 09 	call	0x124c	; 0x124c <main>
      8a:	0c 94 74 1b 	jmp	0x36e8	; 0x36e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ef       	ldi	r26, 0xF8	; 248
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ef       	ldi	r24, 0xF8	; 248
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER1_Ticks>:
 *                     Functions Definitions                                   *
 *******************************************************************************/
/* Description:
 * This function counts the ticks of the timer ( callback function)
 */
void TIMER1_Ticks(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     b4e:	80 91 09 01 	lds	r24, 0x0109
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 09 01 	sts	0x0109, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <optionsMenu>:
/* Description:
 * This function is responsible for displaying main options menu on LCD
 */
void optionsMenu(void) {
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	/* The LCD will always display the main system option */
	LCD_clearScreen();
     b66:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
     b6a:	20 e6       	ldi	r18, 0x60	; 96
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	a9 01       	movw	r20, r18
     b74:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
     b78:	2e e6       	ldi	r18, 0x6E	; 110
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	a9 01       	movw	r20, r18
     b82:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>

}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <PassVerify>:

/* Description:
 * This function is responsible for reading password user input and send it to control ECU to check it
 */
void PassVerify(void) {
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	 * Send a data byte '@' to Control ECU - a command to read password and verify it
	 * Take password from user and receive passCheck flag from control ECU
	 */

	/* Clear LCD and display the message "Plz enter pass" */
	LCD_clearScreen();
     b94:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz Enter Pass");
     b98:	2e e7       	ldi	r18, 0x7E	; 126
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0); /* Move the cursor to the second row */
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_moveCursor>
	UART_sendByte('#');
     bae:	83 e2       	ldi	r24, 0x23	; 35
     bb0:	0e 94 44 1a 	call	0x3488	; 0x3488 <UART_sendByte>
	passInput();
     bb4:	0e 94 3b 06 	call	0xc76	; 0xc76 <passInput>

}
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <buzzerON>:

/* Description:
 * This function is responsible for turning on the buzzer
 */
void buzzerON(void) {
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
	/* Clear LCD and display the message "System Error!" */
	LCD_clearScreen();
     bc6:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "System Error!");
     bca:	2d e8       	ldi	r18, 0x8D	; 141
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	a9 01       	movw	r20, r18
     bd4:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
	/* Send a command that is responsible for turning ON the buzzer*/
	UART_sendByte('@');
     bd8:	80 e4       	ldi	r24, 0x40	; 64
     bda:	0e 94 44 1a 	call	0x3488	; 0x3488 <UART_sendByte>
	/* Reset the global variable of counts */
	g_ticks = 0;
     bde:	10 92 09 01 	sts	0x0109, r1
	while (g_ticks < 61) {/*wait for 1 minute - 60 seconds*/}
     be2:	80 91 09 01 	lds	r24, 0x0109
     be6:	8d 33       	cpi	r24, 0x3D	; 61
     be8:	e0 f3       	brcs	.-8      	; 0xbe2 <buzzerON+0x24>
}
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <openDoor>:

/* Description:
 * This function is responsible for Opening the door for 15 seconds then holds
 * it for 3 seconds then close the door after 15 seconds
 */
void openDoor(void) {
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
	 the screen “Door is Locking”*/

	/* Send a data byte 'M' to Control ECU to control motor*/

	/* Reset the global variable of counts */
	g_ticks = 0;
     bf8:	10 92 09 01 	sts	0x0109, r1
	LCD_clearScreen();
     bfc:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is ");
     c00:	2b e9       	ldi	r18, 0x9B	; 155
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	a9 01       	movw	r20, r18
     c0a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Unlocking");
     c0e:	24 ea       	ldi	r18, 0xA4	; 164
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	a9 01       	movw	r20, r18
     c18:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
	UART_sendByte('%');
     c1c:	85 e2       	ldi	r24, 0x25	; 37
     c1e:	0e 94 44 1a 	call	0x3488	; 0x3488 <UART_sendByte>
	while (g_ticks < 16) {
     c22:	80 91 09 01 	lds	r24, 0x0109
     c26:	80 31       	cpi	r24, 0x10	; 16
     c28:	e0 f3       	brcs	.-8      	; 0xc22 <openDoor+0x32>
		/* waits for 15 seconds*/
	}
	LCD_clearScreen();
     c2a:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Closing in 3s");
     c2e:	2e ea       	ldi	r18, 0xAE	; 174
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	a9 01       	movw	r20, r18
     c38:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
	while (g_ticks < 19) {
     c3c:	80 91 09 01 	lds	r24, 0x0109
     c40:	83 31       	cpi	r24, 0x13	; 19
     c42:	e0 f3       	brcs	.-8      	; 0xc3c <openDoor+0x4c>
		/* waits for 3 seconds*/
	}
	LCD_clearScreen();
     c44:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is ");
     c48:	2b e9       	ldi	r18, 0x9B	; 155
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	a9 01       	movw	r20, r18
     c52:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Locking");
     c56:	2c eb       	ldi	r18, 0xBC	; 188
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	a9 01       	movw	r20, r18
     c60:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>

	while (g_ticks < 34) {
     c64:	80 91 09 01 	lds	r24, 0x0109
     c68:	82 32       	cpi	r24, 0x22	; 34
     c6a:	e0 f3       	brcs	.-8      	; 0xc64 <openDoor+0x74>
		/* waits for 15 seconds*/
	}
	/* Reset the global variable of counts */
	g_ticks = 0;
     c6c:	10 92 09 01 	sts	0x0109, r1

}
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <passInput>:

/* Description:
 * This function is responsible for password verification
 */
void passInput(void) {
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	6e 97       	sbiw	r28, 0x1e	; 30
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
	uint8 key, i;
	for (i = 0; i < 5; i++) {
     c8a:	1d 8e       	std	Y+29, r1	; 0x1d
     c8c:	85 c0       	rjmp	.+266    	; 0xd98 <passInput+0x122>
		/* Get the pressed key number, if any switch pressed for more than 500 ms
		 * it will considered more than one press */
		key = KEYPAD_getPressedKey();
     c8e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <KEYPAD_getPressedKey>
     c92:	8e 8f       	std	Y+30, r24	; 0x1e

		if ((key <= 9) && (key >= 0)) {
     c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c96:	8a 30       	cpi	r24, 0x0A	; 10
     c98:	38 f4       	brcc	.+14     	; 0xca8 <passInput+0x32>
			/* Displays * when any number is pressed */
			LCD_displayCharacter('*');
     c9a:	8a e2       	ldi	r24, 0x2A	; 42
     c9c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayCharacter>
			/* send data to Control_ECU using UART */
			UART_sendByte(key);
     ca0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ca2:	0e 94 44 1a 	call	0x3488	; 0x3488 <UART_sendByte>
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <passInput+0x38>
		} else {
			i--; /* Password consists of 5 numbers and can not include characters */
     ca8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     caa:	81 50       	subi	r24, 0x01	; 1
     cac:	8d 8f       	std	Y+29, r24	; 0x1d
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	aa ef       	ldi	r26, 0xFA	; 250
     cb4:	b3 e4       	ldi	r27, 0x43	; 67
     cb6:	89 8f       	std	Y+25, r24	; 0x19
     cb8:	9a 8f       	std	Y+26, r25	; 0x1a
     cba:	ab 8f       	std	Y+27, r26	; 0x1b
     cbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	69 8d       	ldd	r22, Y+25	; 0x19
     cc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8d 8b       	std	Y+21, r24	; 0x15
     cd8:	9e 8b       	std	Y+22, r25	; 0x16
     cda:	af 8b       	std	Y+23, r26	; 0x17
     cdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cde:	6d 89       	ldd	r22, Y+21	; 0x15
     ce0:	7e 89       	ldd	r23, Y+22	; 0x16
     ce2:	8f 89       	ldd	r24, Y+23	; 0x17
     ce4:	98 8d       	ldd	r25, Y+24	; 0x18
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <passInput+0x8a>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9c 8b       	std	Y+20, r25	; 0x14
     cfc:	8b 8b       	std	Y+19, r24	; 0x13
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <passInput+0x108>
	else if (__tmp > 65535)
     d00:	6d 89       	ldd	r22, Y+21	; 0x15
     d02:	7e 89       	ldd	r23, Y+22	; 0x16
     d04:	8f 89       	ldd	r24, Y+23	; 0x17
     d06:	98 8d       	ldd	r25, Y+24	; 0x18
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <passInput+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	69 8d       	ldd	r22, Y+25	; 0x19
     d1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9c 8b       	std	Y+20, r25	; 0x14
     d3e:	8b 8b       	std	Y+19, r24	; 0x13
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <passInput+0xea>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9a 8b       	std	Y+18, r25	; 0x12
     d48:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d4a:	89 89       	ldd	r24, Y+17	; 0x11
     d4c:	9a 89       	ldd	r25, Y+18	; 0x12
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <passInput+0xd8>
     d52:	9a 8b       	std	Y+18, r25	; 0x12
     d54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8b 89       	ldd	r24, Y+19	; 0x13
     d58:	9c 89       	ldd	r25, Y+20	; 0x14
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9c 8b       	std	Y+20, r25	; 0x14
     d5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <passInput+0xcc>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <passInput+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9c 8b       	std	Y+20, r25	; 0x14
     d7c:	8b 8b       	std	Y+19, r24	; 0x13
     d7e:	8b 89       	ldd	r24, Y+19	; 0x13
     d80:	9c 89       	ldd	r25, Y+20	; 0x14
     d82:	98 8b       	std	Y+16, r25	; 0x10
     d84:	8f 87       	std	Y+15, r24	; 0x0f
     d86:	8f 85       	ldd	r24, Y+15	; 0x0f
     d88:	98 89       	ldd	r25, Y+16	; 0x10
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <passInput+0x114>
     d8e:	98 8b       	std	Y+16, r25	; 0x10
     d90:	8f 87       	std	Y+15, r24	; 0x0f
/* Description:
 * This function is responsible for password verification
 */
void passInput(void) {
	uint8 key, i;
	for (i = 0; i < 5; i++) {
     d92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	8d 8f       	std	Y+29, r24	; 0x1d
     d98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d9a:	85 30       	cpi	r24, 0x05	; 5
     d9c:	08 f4       	brcc	.+2      	; 0xda0 <passInput+0x12a>
     d9e:	77 cf       	rjmp	.-274    	; 0xc8e <passInput+0x18>
		} else {
			i--; /* Password consists of 5 numbers and can not include characters */
		}
		_delay_ms(500); /* Press time */
	}
	key = KEYPAD_getPressedKey();
     da0:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <KEYPAD_getPressedKey>
     da4:	8e 8f       	std	Y+30, r24	; 0x1e
	if (key == '=') /* '=' button is used as enter button */
     da6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     da8:	8d 33       	cpi	r24, 0x3D	; 61
     daa:	09 f0       	breq	.+2      	; 0xdae <passInput+0x138>
     dac:	76 c0       	rjmp	.+236    	; 0xe9a <passInput+0x224>
	{
		/*passCheck byte is used to detect if password matched or not
		 * 0: password did not match
		 * 1: password matched successfully
		 * */
		g_passCheck = UART_recieveByte();
     dae:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <UART_recieveByte>
     db2:	80 93 08 01 	sts	0x0108, r24
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	aa ef       	ldi	r26, 0xFA	; 250
     dbc:	b3 e4       	ldi	r27, 0x43	; 67
     dbe:	8b 87       	std	Y+11, r24	; 0x0b
     dc0:	9c 87       	std	Y+12, r25	; 0x0c
     dc2:	ad 87       	std	Y+13, r26	; 0x0d
     dc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dca:	8d 85       	ldd	r24, Y+13	; 0x0d
     dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	4a ef       	ldi	r20, 0xFA	; 250
     dd4:	54 e4       	ldi	r21, 0x44	; 68
     dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	8f 83       	std	Y+7, r24	; 0x07
     de0:	98 87       	std	Y+8, r25	; 0x08
     de2:	a9 87       	std	Y+9, r26	; 0x09
     de4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de6:	6f 81       	ldd	r22, Y+7	; 0x07
     de8:	78 85       	ldd	r23, Y+8	; 0x08
     dea:	89 85       	ldd	r24, Y+9	; 0x09
     dec:	9a 85       	ldd	r25, Y+10	; 0x0a
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e8       	ldi	r20, 0x80	; 128
     df4:	5f e3       	ldi	r21, 0x3F	; 63
     df6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dfa:	88 23       	and	r24, r24
     dfc:	2c f4       	brge	.+10     	; 0xe08 <passInput+0x192>
		__ticks = 1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	9e 83       	std	Y+6, r25	; 0x06
     e04:	8d 83       	std	Y+5, r24	; 0x05
     e06:	3f c0       	rjmp	.+126    	; 0xe86 <passInput+0x210>
	else if (__tmp > 65535)
     e08:	6f 81       	ldd	r22, Y+7	; 0x07
     e0a:	78 85       	ldd	r23, Y+8	; 0x08
     e0c:	89 85       	ldd	r24, Y+9	; 0x09
     e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	3f ef       	ldi	r19, 0xFF	; 255
     e14:	4f e7       	ldi	r20, 0x7F	; 127
     e16:	57 e4       	ldi	r21, 0x47	; 71
     e18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	4c f5       	brge	.+82     	; 0xe72 <passInput+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e20:	6b 85       	ldd	r22, Y+11	; 0x0b
     e22:	7c 85       	ldd	r23, Y+12	; 0x0c
     e24:	8d 85       	ldd	r24, Y+13	; 0x0d
     e26:	9e 85       	ldd	r25, Y+14	; 0x0e
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e2       	ldi	r20, 0x20	; 32
     e2e:	51 e4       	ldi	r21, 0x41	; 65
     e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9e 83       	std	Y+6, r25	; 0x06
     e46:	8d 83       	std	Y+5, r24	; 0x05
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <passInput+0x1f2>
     e4a:	88 ec       	ldi	r24, 0xC8	; 200
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	8b 83       	std	Y+3, r24	; 0x03
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	9c 81       	ldd	r25, Y+4	; 0x04
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <passInput+0x1e0>
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	9e 81       	ldd	r25, Y+6	; 0x06
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	9e 83       	std	Y+6, r25	; 0x06
     e66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	69 f7       	brne	.-38     	; 0xe4a <passInput+0x1d4>
     e70:	14 c0       	rjmp	.+40     	; 0xe9a <passInput+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e72:	6f 81       	ldd	r22, Y+7	; 0x07
     e74:	78 85       	ldd	r23, Y+8	; 0x08
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	9e 83       	std	Y+6, r25	; 0x06
     e84:	8d 83       	std	Y+5, r24	; 0x05
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <passInput+0x21c>
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500); /* Delay to receive one byte from UART */
	}
}
     e9a:	6e 96       	adiw	r28, 0x1e	; 30
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <createPass>:

/* Description:
 * This function is responsible for creating password or changing it
 */
void createPass(void) {
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	ac 97       	sbiw	r28, 0x2c	; 44
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
	/* Clear LCD and display the message "Plz enter pass" */
	LCD_clearScreen();
     ec0:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz Enter Pass");
     ec4:	2e e7       	ldi	r18, 0x7E	; 126
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	a9 01       	movw	r20, r18
     ece:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0); /* Move the cursor to the second row */
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_moveCursor>

	/*Send a data byte '@' to Control ECU to make it ready to read and save password*/
	UART_sendByte('+');
     eda:	8b e2       	ldi	r24, 0x2B	; 43
     edc:	0e 94 44 1a 	call	0x3488	; 0x3488 <UART_sendByte>
	uint8 key, i;
	for (i = 0; i < 5; i++) {
     ee0:	1b a6       	std	Y+43, r1	; 0x2b
     ee2:	85 c0       	rjmp	.+266    	; 0xfee <createPass+0x142>

		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
     ee4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <KEYPAD_getPressedKey>
     ee8:	8c a7       	std	Y+44, r24	; 0x2c

		if ((key <= 9) && (key >= 0)) {
     eea:	8c a5       	ldd	r24, Y+44	; 0x2c
     eec:	8a 30       	cpi	r24, 0x0A	; 10
     eee:	38 f4       	brcc	.+14     	; 0xefe <createPass+0x52>
			/* Displays * when any number is pressed */
			LCD_displayCharacter('*');
     ef0:	8a e2       	ldi	r24, 0x2A	; 42
     ef2:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayCharacter>
			/* send data to Control_ECU using UART */
			UART_sendByte(key);
     ef6:	8c a5       	ldd	r24, Y+44	; 0x2c
     ef8:	0e 94 44 1a 	call	0x3488	; 0x3488 <UART_sendByte>
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <createPass+0x58>
		} else {
			i--; /* Password consists of 5 numbers and can not include characters */
     efe:	8b a5       	ldd	r24, Y+43	; 0x2b
     f00:	81 50       	subi	r24, 0x01	; 1
     f02:	8b a7       	std	Y+43, r24	; 0x2b
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	aa ef       	ldi	r26, 0xFA	; 250
     f0a:	b3 e4       	ldi	r27, 0x43	; 67
     f0c:	8f a3       	std	Y+39, r24	; 0x27
     f0e:	98 a7       	std	Y+40, r25	; 0x28
     f10:	a9 a7       	std	Y+41, r26	; 0x29
     f12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f14:	6f a1       	ldd	r22, Y+39	; 0x27
     f16:	78 a5       	ldd	r23, Y+40	; 0x28
     f18:	89 a5       	ldd	r24, Y+41	; 0x29
     f1a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	4a ef       	ldi	r20, 0xFA	; 250
     f22:	54 e4       	ldi	r21, 0x44	; 68
     f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	8b a3       	std	Y+35, r24	; 0x23
     f2e:	9c a3       	std	Y+36, r25	; 0x24
     f30:	ad a3       	std	Y+37, r26	; 0x25
     f32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f34:	6b a1       	ldd	r22, Y+35	; 0x23
     f36:	7c a1       	ldd	r23, Y+36	; 0x24
     f38:	8d a1       	ldd	r24, Y+37	; 0x25
     f3a:	9e a1       	ldd	r25, Y+38	; 0x26
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e8       	ldi	r20, 0x80	; 128
     f42:	5f e3       	ldi	r21, 0x3F	; 63
     f44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f48:	88 23       	and	r24, r24
     f4a:	2c f4       	brge	.+10     	; 0xf56 <createPass+0xaa>
		__ticks = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9a a3       	std	Y+34, r25	; 0x22
     f52:	89 a3       	std	Y+33, r24	; 0x21
     f54:	3f c0       	rjmp	.+126    	; 0xfd4 <createPass+0x128>
	else if (__tmp > 65535)
     f56:	6b a1       	ldd	r22, Y+35	; 0x23
     f58:	7c a1       	ldd	r23, Y+36	; 0x24
     f5a:	8d a1       	ldd	r24, Y+37	; 0x25
     f5c:	9e a1       	ldd	r25, Y+38	; 0x26
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	3f ef       	ldi	r19, 0xFF	; 255
     f62:	4f e7       	ldi	r20, 0x7F	; 127
     f64:	57 e4       	ldi	r21, 0x47	; 71
     f66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f6a:	18 16       	cp	r1, r24
     f6c:	4c f5       	brge	.+82     	; 0xfc0 <createPass+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6e:	6f a1       	ldd	r22, Y+39	; 0x27
     f70:	78 a5       	ldd	r23, Y+40	; 0x28
     f72:	89 a5       	ldd	r24, Y+41	; 0x29
     f74:	9a a5       	ldd	r25, Y+42	; 0x2a
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e2       	ldi	r20, 0x20	; 32
     f7c:	51 e4       	ldi	r21, 0x41	; 65
     f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	9a a3       	std	Y+34, r25	; 0x22
     f94:	89 a3       	std	Y+33, r24	; 0x21
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <createPass+0x10a>
     f98:	88 ec       	ldi	r24, 0xC8	; 200
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	98 a3       	std	Y+32, r25	; 0x20
     f9e:	8f 8f       	std	Y+31, r24	; 0x1f
     fa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fa2:	98 a1       	ldd	r25, Y+32	; 0x20
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <createPass+0xf8>
     fa8:	98 a3       	std	Y+32, r25	; 0x20
     faa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	89 a1       	ldd	r24, Y+33	; 0x21
     fae:	9a a1       	ldd	r25, Y+34	; 0x22
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	9a a3       	std	Y+34, r25	; 0x22
     fb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	89 a1       	ldd	r24, Y+33	; 0x21
     fb8:	9a a1       	ldd	r25, Y+34	; 0x22
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	69 f7       	brne	.-38     	; 0xf98 <createPass+0xec>
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <createPass+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	6b a1       	ldd	r22, Y+35	; 0x23
     fc2:	7c a1       	ldd	r23, Y+36	; 0x24
     fc4:	8d a1       	ldd	r24, Y+37	; 0x25
     fc6:	9e a1       	ldd	r25, Y+38	; 0x26
     fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9a a3       	std	Y+34, r25	; 0x22
     fd2:	89 a3       	std	Y+33, r24	; 0x21
     fd4:	89 a1       	ldd	r24, Y+33	; 0x21
     fd6:	9a a1       	ldd	r25, Y+34	; 0x22
     fd8:	9e 8f       	std	Y+30, r25	; 0x1e
     fda:	8d 8f       	std	Y+29, r24	; 0x1d
     fdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fde:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <createPass+0x134>
     fe4:	9e 8f       	std	Y+30, r25	; 0x1e
     fe6:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_moveCursor(1, 0); /* Move the cursor to the second row */

	/*Send a data byte '@' to Control ECU to make it ready to read and save password*/
	UART_sendByte('+');
	uint8 key, i;
	for (i = 0; i < 5; i++) {
     fe8:	8b a5       	ldd	r24, Y+43	; 0x2b
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	8b a7       	std	Y+43, r24	; 0x2b
     fee:	8b a5       	ldd	r24, Y+43	; 0x2b
     ff0:	85 30       	cpi	r24, 0x05	; 5
     ff2:	08 f4       	brcc	.+2      	; 0xff6 <createPass+0x14a>
     ff4:	77 cf       	rjmp	.-274    	; 0xee4 <createPass+0x38>
			i--; /* Password consists of 5 numbers and can not include characters */
		}
		_delay_ms(500); /* Press time */
	}

	key = KEYPAD_getPressedKey();
     ff6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <KEYPAD_getPressedKey>
     ffa:	8c a7       	std	Y+44, r24	; 0x2c
	if (key == '=') /* '=' button is used as enter button */
     ffc:	8c a5       	ldd	r24, Y+44	; 0x2c
     ffe:	8d 33       	cpi	r24, 0x3D	; 61
    1000:	81 f4       	brne	.+32     	; 0x1022 <createPass+0x176>
	{
		/*Ask the user to renter the same password for confirmation*/
		LCD_clearScreen();
    1002:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Plz re-enter the"); /*Displays this message “Plz re-enter the same Pass:*/
    1006:	24 ec       	ldi	r18, 0xC4	; 196
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	a9 01       	movw	r20, r18
    1010:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "same pass:");
    1014:	25 ed       	ldi	r18, 0xD5	; 213
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	a9 01       	movw	r20, r18
    101e:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
	}
	LCD_moveCursor(1, 10); /* Move the cursor to the second row */
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	6a e0       	ldi	r22, 0x0A	; 10
    1026:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_moveCursor>

	for (i = 0; i < 5; i++) {
    102a:	1b a6       	std	Y+43, r1	; 0x2b
    102c:	85 c0       	rjmp	.+266    	; 0x1138 <createPass+0x28c>
		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
    102e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <KEYPAD_getPressedKey>
    1032:	8c a7       	std	Y+44, r24	; 0x2c
		if ((key <= 9) && (key >= 0)) {
    1034:	8c a5       	ldd	r24, Y+44	; 0x2c
    1036:	8a 30       	cpi	r24, 0x0A	; 10
    1038:	38 f4       	brcc	.+14     	; 0x1048 <createPass+0x19c>

			LCD_displayCharacter('*'); /* Displays * when any number is pressed */
    103a:	8a e2       	ldi	r24, 0x2A	; 42
    103c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayCharacter>
			UART_sendByte(key); /* send data to Control_ECU using UART */
    1040:	8c a5       	ldd	r24, Y+44	; 0x2c
    1042:	0e 94 44 1a 	call	0x3488	; 0x3488 <UART_sendByte>
    1046:	03 c0       	rjmp	.+6      	; 0x104e <createPass+0x1a2>

		} else {

			i--; /*Password consists of 5 numbers and can not include characters*/
    1048:	8b a5       	ldd	r24, Y+43	; 0x2b
    104a:	81 50       	subi	r24, 0x01	; 1
    104c:	8b a7       	std	Y+43, r24	; 0x2b
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	aa ef       	ldi	r26, 0xFA	; 250
    1054:	b3 e4       	ldi	r27, 0x43	; 67
    1056:	89 8f       	std	Y+25, r24	; 0x19
    1058:	9a 8f       	std	Y+26, r25	; 0x1a
    105a:	ab 8f       	std	Y+27, r26	; 0x1b
    105c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105e:	69 8d       	ldd	r22, Y+25	; 0x19
    1060:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1062:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1064:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	4a ef       	ldi	r20, 0xFA	; 250
    106c:	54 e4       	ldi	r21, 0x44	; 68
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8d 8b       	std	Y+21, r24	; 0x15
    1078:	9e 8b       	std	Y+22, r25	; 0x16
    107a:	af 8b       	std	Y+23, r26	; 0x17
    107c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    107e:	6d 89       	ldd	r22, Y+21	; 0x15
    1080:	7e 89       	ldd	r23, Y+22	; 0x16
    1082:	8f 89       	ldd	r24, Y+23	; 0x17
    1084:	98 8d       	ldd	r25, Y+24	; 0x18
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	2c f4       	brge	.+10     	; 0x10a0 <createPass+0x1f4>
		__ticks = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9c 8b       	std	Y+20, r25	; 0x14
    109c:	8b 8b       	std	Y+19, r24	; 0x13
    109e:	3f c0       	rjmp	.+126    	; 0x111e <createPass+0x272>
	else if (__tmp > 65535)
    10a0:	6d 89       	ldd	r22, Y+21	; 0x15
    10a2:	7e 89       	ldd	r23, Y+22	; 0x16
    10a4:	8f 89       	ldd	r24, Y+23	; 0x17
    10a6:	98 8d       	ldd	r25, Y+24	; 0x18
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	3f ef       	ldi	r19, 0xFF	; 255
    10ac:	4f e7       	ldi	r20, 0x7F	; 127
    10ae:	57 e4       	ldi	r21, 0x47	; 71
    10b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	4c f5       	brge	.+82     	; 0x110a <createPass+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b8:	69 8d       	ldd	r22, Y+25	; 0x19
    10ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	51 e4       	ldi	r21, 0x41	; 65
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9c 8b       	std	Y+20, r25	; 0x14
    10de:	8b 8b       	std	Y+19, r24	; 0x13
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <createPass+0x254>
    10e2:	88 ec       	ldi	r24, 0xC8	; 200
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9a 8b       	std	Y+18, r25	; 0x12
    10e8:	89 8b       	std	Y+17, r24	; 0x11
    10ea:	89 89       	ldd	r24, Y+17	; 0x11
    10ec:	9a 89       	ldd	r25, Y+18	; 0x12
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <createPass+0x242>
    10f2:	9a 8b       	std	Y+18, r25	; 0x12
    10f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f6:	8b 89       	ldd	r24, Y+19	; 0x13
    10f8:	9c 89       	ldd	r25, Y+20	; 0x14
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	9c 8b       	std	Y+20, r25	; 0x14
    10fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	69 f7       	brne	.-38     	; 0x10e2 <createPass+0x236>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <createPass+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110a:	6d 89       	ldd	r22, Y+21	; 0x15
    110c:	7e 89       	ldd	r23, Y+22	; 0x16
    110e:	8f 89       	ldd	r24, Y+23	; 0x17
    1110:	98 8d       	ldd	r25, Y+24	; 0x18
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9c 8b       	std	Y+20, r25	; 0x14
    111c:	8b 8b       	std	Y+19, r24	; 0x13
    111e:	8b 89       	ldd	r24, Y+19	; 0x13
    1120:	9c 89       	ldd	r25, Y+20	; 0x14
    1122:	98 8b       	std	Y+16, r25	; 0x10
    1124:	8f 87       	std	Y+15, r24	; 0x0f
    1126:	8f 85       	ldd	r24, Y+15	; 0x0f
    1128:	98 89       	ldd	r25, Y+16	; 0x10
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <createPass+0x27e>
    112e:	98 8b       	std	Y+16, r25	; 0x10
    1130:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_displayStringRowColumn(0, 0, "Plz re-enter the"); /*Displays this message “Plz re-enter the same Pass:*/
		LCD_displayStringRowColumn(1, 0, "same pass:");
	}
	LCD_moveCursor(1, 10); /* Move the cursor to the second row */

	for (i = 0; i < 5; i++) {
    1132:	8b a5       	ldd	r24, Y+43	; 0x2b
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	8b a7       	std	Y+43, r24	; 0x2b
    1138:	8b a5       	ldd	r24, Y+43	; 0x2b
    113a:	85 30       	cpi	r24, 0x05	; 5
    113c:	08 f4       	brcc	.+2      	; 0x1140 <createPass+0x294>
    113e:	77 cf       	rjmp	.-274    	; 0x102e <createPass+0x182>
			i--; /*Password consists of 5 numbers and can not include characters*/
		}
		_delay_ms(500); /* Press time */
	}

	key = KEYPAD_getPressedKey();
    1140:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <KEYPAD_getPressedKey>
    1144:	8c a7       	std	Y+44, r24	; 0x2c

	if (key == '=')/* '=' button is used as enter button */
    1146:	8c a5       	ldd	r24, Y+44	; 0x2c
    1148:	8d 33       	cpi	r24, 0x3D	; 61
    114a:	09 f0       	breq	.+2      	; 0x114e <createPass+0x2a2>
    114c:	76 c0       	rjmp	.+236    	; 0x123a <createPass+0x38e>
	{
		/*passCheck byte is used to detect if password matched or not
		 * 0: password did not match
		 * 1: password matched successfully
		 * */
		g_passCheck = UART_recieveByte();
    114e:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <UART_recieveByte>
    1152:	80 93 08 01 	sts	0x0108, r24
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	aa ef       	ldi	r26, 0xFA	; 250
    115c:	b3 e4       	ldi	r27, 0x43	; 67
    115e:	8b 87       	std	Y+11, r24	; 0x0b
    1160:	9c 87       	std	Y+12, r25	; 0x0c
    1162:	ad 87       	std	Y+13, r26	; 0x0d
    1164:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1166:	6b 85       	ldd	r22, Y+11	; 0x0b
    1168:	7c 85       	ldd	r23, Y+12	; 0x0c
    116a:	8d 85       	ldd	r24, Y+13	; 0x0d
    116c:	9e 85       	ldd	r25, Y+14	; 0x0e
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	4a ef       	ldi	r20, 0xFA	; 250
    1174:	54 e4       	ldi	r21, 0x44	; 68
    1176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	8f 83       	std	Y+7, r24	; 0x07
    1180:	98 87       	std	Y+8, r25	; 0x08
    1182:	a9 87       	std	Y+9, r26	; 0x09
    1184:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1186:	6f 81       	ldd	r22, Y+7	; 0x07
    1188:	78 85       	ldd	r23, Y+8	; 0x08
    118a:	89 85       	ldd	r24, Y+9	; 0x09
    118c:	9a 85       	ldd	r25, Y+10	; 0x0a
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e8       	ldi	r20, 0x80	; 128
    1194:	5f e3       	ldi	r21, 0x3F	; 63
    1196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    119a:	88 23       	and	r24, r24
    119c:	2c f4       	brge	.+10     	; 0x11a8 <createPass+0x2fc>
		__ticks = 1;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	9e 83       	std	Y+6, r25	; 0x06
    11a4:	8d 83       	std	Y+5, r24	; 0x05
    11a6:	3f c0       	rjmp	.+126    	; 0x1226 <createPass+0x37a>
	else if (__tmp > 65535)
    11a8:	6f 81       	ldd	r22, Y+7	; 0x07
    11aa:	78 85       	ldd	r23, Y+8	; 0x08
    11ac:	89 85       	ldd	r24, Y+9	; 0x09
    11ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	3f ef       	ldi	r19, 0xFF	; 255
    11b4:	4f e7       	ldi	r20, 0x7F	; 127
    11b6:	57 e4       	ldi	r21, 0x47	; 71
    11b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11bc:	18 16       	cp	r1, r24
    11be:	4c f5       	brge	.+82     	; 0x1212 <createPass+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 e2       	ldi	r20, 0x20	; 32
    11ce:	51 e4       	ldi	r21, 0x41	; 65
    11d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	bc 01       	movw	r22, r24
    11da:	cd 01       	movw	r24, r26
    11dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
    11e8:	0f c0       	rjmp	.+30     	; 0x1208 <createPass+0x35c>
    11ea:	88 ec       	ldi	r24, 0xC8	; 200
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	8b 83       	std	Y+3, r24	; 0x03
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <createPass+0x34a>
    11fa:	9c 83       	std	Y+4, r25	; 0x04
    11fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	9e 81       	ldd	r25, Y+6	; 0x06
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	9e 83       	std	Y+6, r25	; 0x06
    1206:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	69 f7       	brne	.-38     	; 0x11ea <createPass+0x33e>
    1210:	14 c0       	rjmp	.+40     	; 0x123a <createPass+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1212:	6f 81       	ldd	r22, Y+7	; 0x07
    1214:	78 85       	ldd	r23, Y+8	; 0x08
    1216:	89 85       	ldd	r24, Y+9	; 0x09
    1218:	9a 85       	ldd	r25, Y+10	; 0x0a
    121a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	9e 83       	std	Y+6, r25	; 0x06
    1224:	8d 83       	std	Y+5, r24	; 0x05
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <createPass+0x386>
    1236:	9a 83       	std	Y+2, r25	; 0x02
    1238:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500); /* Delay to receive one byte from UART */
	}
}
    123a:	ac 96       	adiw	r28, 0x2c	; 44
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <main>:
/*******************************************************************************
 *                   The MAIN of the program                                   *
 *******************************************************************************/
int main(void) {
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	65 97       	sbiw	r28, 0x15	; 21
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
	uint8 key_main;
	/************************* LCD initialization **************************/
	LCD_init(); /*Initialize the LCD*/
    1260:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <LCD_init>
	 * 8-bit data
	 * Parity bit is disabled
	 * ONE stop bit
	 * Baud-rate: 9600
	 */
	UART_ConfigType uart_config = { EIGHT, DISABLED, ONE_BIT, BAUDRATE_9600 };
    1264:	83 e0       	ldi	r24, 0x03	; 3
    1266:	8a 83       	std	Y+2, r24	; 0x02
    1268:	1b 82       	std	Y+3, r1	; 0x03
    126a:	1c 82       	std	Y+4, r1	; 0x04
    126c:	86 e0       	ldi	r24, 0x06	; 6
    126e:	8d 83       	std	Y+5, r24	; 0x05
	UART_init(&uart_config); /* Initialize UART with the required configuration */
    1270:	ce 01       	movw	r24, r28
    1272:	02 96       	adiw	r24, 0x02	; 2
    1274:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <UART_init>
	 * Compare value : 1000
	 * Pre-scalar: 256
	 * Mode: Compare
	 * Callback Function: TIMER1_Ticks()
	 */
	Timer1_ConfigType timer1_config = { 0, 999, F_CPU_256, COMPARE };
    1278:	9e 01       	movw	r18, r28
    127a:	2a 5f       	subi	r18, 0xFA	; 250
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	3a 8b       	std	Y+18, r19	; 0x12
    1280:	29 8b       	std	Y+17, r18	; 0x11
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	9c 8b       	std	Y+20, r25	; 0x14
    1288:	8b 8b       	std	Y+19, r24	; 0x13
    128a:	97 e0       	ldi	r25, 0x07	; 7
    128c:	9d 8b       	std	Y+21, r25	; 0x15
    128e:	eb 89       	ldd	r30, Y+19	; 0x13
    1290:	fc 89       	ldd	r31, Y+20	; 0x14
    1292:	00 80       	ld	r0, Z
    1294:	2b 89       	ldd	r18, Y+19	; 0x13
    1296:	3c 89       	ldd	r19, Y+20	; 0x14
    1298:	2f 5f       	subi	r18, 0xFF	; 255
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	3c 8b       	std	Y+20, r19	; 0x14
    129e:	2b 8b       	std	Y+19, r18	; 0x13
    12a0:	e9 89       	ldd	r30, Y+17	; 0x11
    12a2:	fa 89       	ldd	r31, Y+18	; 0x12
    12a4:	00 82       	st	Z, r0
    12a6:	29 89       	ldd	r18, Y+17	; 0x11
    12a8:	3a 89       	ldd	r19, Y+18	; 0x12
    12aa:	2f 5f       	subi	r18, 0xFF	; 255
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
    12ae:	3a 8b       	std	Y+18, r19	; 0x12
    12b0:	29 8b       	std	Y+17, r18	; 0x11
    12b2:	3d 89       	ldd	r19, Y+21	; 0x15
    12b4:	31 50       	subi	r19, 0x01	; 1
    12b6:	3d 8b       	std	Y+21, r19	; 0x15
    12b8:	8d 89       	ldd	r24, Y+21	; 0x15
    12ba:	88 23       	and	r24, r24
    12bc:	41 f7       	brne	.-48     	; 0x128e <main+0x42>
	Timer1_init(&timer1_config);
    12be:	ce 01       	movw	r24, r28
    12c0:	06 96       	adiw	r24, 0x06	; 6
    12c2:	0e 94 4e 19 	call	0x329c	; 0x329c <Timer1_init>
	Timer1_setCallBack(TIMER1_Ticks);
    12c6:	83 ea       	ldi	r24, 0xA3	; 163
    12c8:	95 e0       	ldi	r25, 0x05	; 5
    12ca:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <Timer1_setCallBack>
	/********* Global interrupts enable I-bit*******************/
	SREG |=(1<<7);
    12ce:	af e5       	ldi	r26, 0x5F	; 95
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ef e5       	ldi	r30, 0x5F	; 95
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 68       	ori	r24, 0x80	; 128
    12da:	8c 93       	st	X, r24
	/**********************************************************/
	/************ Step1 – Create a System Password ************/
	/**********************************************************/

	createPass();
    12dc:	0e 94 56 07 	call	0xeac	; 0xeac <createPass>

	/*If the two passwords are matched then the system
	 has a password now and save it inside the EEPORM and go to Step 2.*/

	if (g_passCheck != 1) { /*Checks if two passwords are matched or not */
    12e0:	80 91 08 01 	lds	r24, 0x0108
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	c9 f0       	breq	.+50     	; 0x131a <main+0xce>
		/*If the two passwords do not match then repeat step 1 again*/
		createPass();
    12e8:	0e 94 56 07 	call	0xeac	; 0xeac <createPass>

		if (g_passCheck != 1) {
    12ec:	80 91 08 01 	lds	r24, 0x0108
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	99 f0       	breq	.+38     	; 0x131a <main+0xce>
			/* If the two passwords do not match for the second time
			 then show an ERROR and close the system*/
			LCD_clearScreen();
    12f4:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Password does");
    12f8:	20 ee       	ldi	r18, 0xE0	; 224
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "not match");
    1306:	2e ee       	ldi	r18, 0xEE	; 238
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
			return 0;
    1314:	18 8a       	std	Y+16, r1	; 0x10
    1316:	1f 86       	std	Y+15, r1	; 0x0f
    1318:	58 c0       	rjmp	.+176    	; 0x13ca <main+0x17e>

	while (1) {
		/**********************************************************/
		/******************* Step2 - Main Options *****************/
		/**********************************************************/
		optionsMenu();
    131a:	0e 94 af 05 	call	0xb5e	; 0xb5e <optionsMenu>

		/* Checks if any button is pressed and holds its value */
		key_main = KEYPAD_getPressedKey();
    131e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <KEYPAD_getPressedKey>
    1322:	89 83       	std	Y+1, r24	; 0x01

		switch (key_main) {
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	e8 2f       	mov	r30, r24
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	fe 87       	std	Y+14, r31	; 0x0e
    132c:	ed 87       	std	Y+13, r30	; 0x0d
    132e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1330:	3e 85       	ldd	r19, Y+14	; 0x0e
    1332:	2b 32       	cpi	r18, 0x2B	; 43
    1334:	31 05       	cpc	r19, r1
    1336:	31 f0       	breq	.+12     	; 0x1344 <main+0xf8>
    1338:	8d 85       	ldd	r24, Y+13	; 0x0d
    133a:	9e 85       	ldd	r25, Y+14	; 0x0e
    133c:	8d 32       	cpi	r24, 0x2D	; 45
    133e:	91 05       	cpc	r25, r1
    1340:	f9 f0       	breq	.+62     	; 0x1380 <main+0x134>
    1342:	eb cf       	rjmp	.-42     	; 0x131a <main+0xce>
			 * Ask the user to enter password
			 * Send a data byte '@' to Control ECU to make
			 it ready for pass verification
			 * Password verification
			 */
			PassVerify(); /* Step 3 */
    1344:	0e 94 c6 05 	call	0xb8c	; 0xb8c <PassVerify>

			if (g_passCheck == 1) {
    1348:	80 91 08 01 	lds	r24, 0x0108
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	19 f4       	brne	.+6      	; 0x1356 <main+0x10a>
				openDoor();
    1350:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <openDoor>
    1354:	e2 cf       	rjmp	.-60     	; 0x131a <main+0xce>
			} else {
				/* If the two passwords did not match repeat step 3 */
				PassVerify(); /* Step 3 */
    1356:	0e 94 c6 05 	call	0xb8c	; 0xb8c <PassVerify>

				if (g_passCheck == 1) {
    135a:	80 91 08 01 	lds	r24, 0x0108
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	19 f4       	brne	.+6      	; 0x1368 <main+0x11c>
					/* If passwords matched open the door */
					openDoor();
    1362:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <openDoor>
    1366:	d9 cf       	rjmp	.-78     	; 0x131a <main+0xce>
				} else {
					/* If Password did not match for the second time repeat step 3 again */

					PassVerify(); /* Step 3 */
    1368:	0e 94 c6 05 	call	0xb8c	; 0xb8c <PassVerify>

					if (g_passCheck == 1) {
    136c:	80 91 08 01 	lds	r24, 0x0108
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	19 f4       	brne	.+6      	; 0x137a <main+0x12e>
						/*If passwords matched open the door */
						openDoor();
    1374:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <openDoor>
    1378:	d0 cf       	rjmp	.-96     	; 0x131a <main+0xce>
						 * Display error message on LCD for 1 minute.
						 * System should be locked no inputs from Keypad will be
						 accepted during this time period.
						 * Go to Step 2 the main options again.
						 */
						buzzerON();
    137a:	0e 94 df 05 	call	0xbbe	; 0xbbe <buzzerON>
    137e:	cd cf       	rjmp	.-102    	; 0x131a <main+0xce>
			/* To change password user have to enter the old password first
			 * Take password from user and verify it
			 * if verified: Start changing password process
			 * if not verified: ask user to enter the password again  */

			PassVerify();
    1380:	0e 94 c6 05 	call	0xb8c	; 0xb8c <PassVerify>
			if (g_passCheck == 1) {
    1384:	80 91 08 01 	lds	r24, 0x0108
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	39 f6       	brne	.-114    	; 0x131a <main+0xce>
				createPass();
    138c:	0e 94 56 07 	call	0xeac	; 0xeac <createPass>
				/*If the two passwords are matched then the system
				 has a new password now and saved it inside the EEPORM*/

				if (g_passCheck != 1) {
    1390:	80 91 08 01 	lds	r24, 0x0108
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	09 f2       	breq	.-126    	; 0x131a <main+0xce>
					/*If the two passwords do not match then repeat step 1 again*/
					createPass();
    1398:	0e 94 56 07 	call	0xeac	; 0xeac <createPass>
					if (g_passCheck != 1) {
    139c:	80 91 08 01 	lds	r24, 0x0108
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <main+0x15a>
    13a4:	ba cf       	rjmp	.-140    	; 0x131a <main+0xce>
						/* If the two passwords do not match for the second time
						 then show an ERROR and close the system*/
						LCD_clearScreen();
    13a6:	0e 94 11 19 	call	0x3222	; 0x3222 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "Password does");
    13aa:	20 ee       	ldi	r18, 0xE0	; 224
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	a9 01       	movw	r20, r18
    13b4:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "not match");
    13b8:	2e ee       	ldi	r18, 0xEE	; 238
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <LCD_displayStringRowColumn>
						return 0;
    13c6:	18 8a       	std	Y+16, r1	; 0x10
    13c8:	1f 86       	std	Y+15, r1	; 0x0f
			}

			break;
		}

	}
    13ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    13cc:	98 89       	ldd	r25, Y+16	; 0x10
}
    13ce:	65 96       	adiw	r28, 0x15	; 21
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <GPIO_setupPinDirection+0x6>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <GPIO_setupPinDirection+0x8>
    13e8:	0f 92       	push	r0
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	6a 83       	std	Y+2, r22	; 0x02
    13f2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	88 30       	cpi	r24, 0x08	; 8
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <GPIO_setupPinDirection+0x1c>
    13fa:	d5 c0       	rjmp	.+426    	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	84 30       	cpi	r24, 0x04	; 4
    1400:	08 f0       	brcs	.+2      	; 0x1404 <GPIO_setupPinDirection+0x24>
    1402:	d1 c0       	rjmp	.+418    	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	3d 83       	std	Y+5, r19	; 0x05
    140c:	2c 83       	std	Y+4, r18	; 0x04
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	91 05       	cpc	r25, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <GPIO_setupPinDirection+0x3a>
    1418:	43 c0       	rjmp	.+134    	; 0x14a0 <GPIO_setupPinDirection+0xc0>
    141a:	2c 81       	ldd	r18, Y+4	; 0x04
    141c:	3d 81       	ldd	r19, Y+5	; 0x05
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	2c f4       	brge	.+10     	; 0x142e <GPIO_setupPinDirection+0x4e>
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	71 f0       	breq	.+28     	; 0x1448 <GPIO_setupPinDirection+0x68>
    142c:	bc c0       	rjmp	.+376    	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
    142e:	2c 81       	ldd	r18, Y+4	; 0x04
    1430:	3d 81       	ldd	r19, Y+5	; 0x05
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <GPIO_setupPinDirection+0x5a>
    1438:	5f c0       	rjmp	.+190    	; 0x14f8 <GPIO_setupPinDirection+0x118>
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <GPIO_setupPinDirection+0x66>
    1444:	85 c0       	rjmp	.+266    	; 0x1550 <GPIO_setupPinDirection+0x170>
    1446:	af c0       	rjmp	.+350    	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	a1 f4       	brne	.+40     	; 0x1476 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    144e:	aa e3       	ldi	r26, 0x3A	; 58
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ea e3       	ldi	r30, 0x3A	; 58
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_setupPinDirection+0x8c>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_setupPinDirection+0x88>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	98 c0       	rjmp	.+304    	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1476:	aa e3       	ldi	r26, 0x3A	; 58
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ea e3       	ldi	r30, 0x3A	; 58
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_setupPinDirection+0xb4>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_setupPinDirection+0xb0>
    1498:	80 95       	com	r24
    149a:	84 23       	and	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	83 c0       	rjmp	.+262    	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	a1 f4       	brne	.+40     	; 0x14ce <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    14a6:	a7 e3       	ldi	r26, 0x37	; 55
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e7 e3       	ldi	r30, 0x37	; 55
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_setupPinDirection+0xe4>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_setupPinDirection+0xe0>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	6c c0       	rjmp	.+216    	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14ce:	a7 e3       	ldi	r26, 0x37	; 55
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e7 e3       	ldi	r30, 0x37	; 55
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <GPIO_setupPinDirection+0x10c>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <GPIO_setupPinDirection+0x108>
    14f0:	80 95       	com	r24
    14f2:	84 23       	and	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	57 c0       	rjmp	.+174    	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	a1 f4       	brne	.+40     	; 0x1526 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14fe:	a4 e3       	ldi	r26, 0x34	; 52
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e4 e3       	ldi	r30, 0x34	; 52
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <GPIO_setupPinDirection+0x13c>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <GPIO_setupPinDirection+0x138>
    1520:	84 2b       	or	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	40 c0       	rjmp	.+128    	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1526:	a4 e3       	ldi	r26, 0x34	; 52
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e4 e3       	ldi	r30, 0x34	; 52
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GPIO_setupPinDirection+0x164>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <GPIO_setupPinDirection+0x160>
    1548:	80 95       	com	r24
    154a:	84 23       	and	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	2b c0       	rjmp	.+86     	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	a1 f4       	brne	.+40     	; 0x157e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1556:	a1 e3       	ldi	r26, 0x31	; 49
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e1 e3       	ldi	r30, 0x31	; 49
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <GPIO_setupPinDirection+0x194>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <GPIO_setupPinDirection+0x190>
    1578:	84 2b       	or	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    157e:	a1 e3       	ldi	r26, 0x31	; 49
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e1 e3       	ldi	r30, 0x31	; 49
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <GPIO_setupPinDirection+0x1bc>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <GPIO_setupPinDirection+0x1b8>
    15a0:	80 95       	com	r24
    15a2:	84 23       	and	r24, r20
    15a4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <GPIO_writePin+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <GPIO_writePin+0x8>
    15be:	0f 92       	push	r0
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	6a 83       	std	Y+2, r22	; 0x02
    15c8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	88 30       	cpi	r24, 0x08	; 8
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <GPIO_writePin+0x1c>
    15d0:	d5 c0       	rjmp	.+426    	; 0x177c <GPIO_writePin+0x1c6>
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	84 30       	cpi	r24, 0x04	; 4
    15d6:	08 f0       	brcs	.+2      	; 0x15da <GPIO_writePin+0x24>
    15d8:	d1 c0       	rjmp	.+418    	; 0x177c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3d 83       	std	Y+5, r19	; 0x05
    15e2:	2c 83       	std	Y+4, r18	; 0x04
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <GPIO_writePin+0x3a>
    15ee:	43 c0       	rjmp	.+134    	; 0x1676 <GPIO_writePin+0xc0>
    15f0:	2c 81       	ldd	r18, Y+4	; 0x04
    15f2:	3d 81       	ldd	r19, Y+5	; 0x05
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	2c f4       	brge	.+10     	; 0x1604 <GPIO_writePin+0x4e>
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	71 f0       	breq	.+28     	; 0x161e <GPIO_writePin+0x68>
    1602:	bc c0       	rjmp	.+376    	; 0x177c <GPIO_writePin+0x1c6>
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <GPIO_writePin+0x5a>
    160e:	5f c0       	rjmp	.+190    	; 0x16ce <GPIO_writePin+0x118>
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	83 30       	cpi	r24, 0x03	; 3
    1616:	91 05       	cpc	r25, r1
    1618:	09 f4       	brne	.+2      	; 0x161c <GPIO_writePin+0x66>
    161a:	85 c0       	rjmp	.+266    	; 0x1726 <GPIO_writePin+0x170>
    161c:	af c0       	rjmp	.+350    	; 0x177c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	a1 f4       	brne	.+40     	; 0x164c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1624:	ab e3       	ldi	r26, 0x3B	; 59
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	eb e3       	ldi	r30, 0x3B	; 59
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <GPIO_writePin+0x8c>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <GPIO_writePin+0x88>
    1646:	84 2b       	or	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	98 c0       	rjmp	.+304    	; 0x177c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    164c:	ab e3       	ldi	r26, 0x3B	; 59
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	eb e3       	ldi	r30, 0x3B	; 59
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <GPIO_writePin+0xb4>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <GPIO_writePin+0xb0>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	83 c0       	rjmp	.+262    	; 0x177c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	a1 f4       	brne	.+40     	; 0x16a4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    167c:	a8 e3       	ldi	r26, 0x38	; 56
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e8 e3       	ldi	r30, 0x38	; 56
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <GPIO_writePin+0xe4>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <GPIO_writePin+0xe0>
    169e:	84 2b       	or	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	6c c0       	rjmp	.+216    	; 0x177c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    16a4:	a8 e3       	ldi	r26, 0x38	; 56
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e8 e3       	ldi	r30, 0x38	; 56
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GPIO_writePin+0x10c>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <GPIO_writePin+0x108>
    16c6:	80 95       	com	r24
    16c8:	84 23       	and	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	57 c0       	rjmp	.+174    	; 0x177c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	a1 f4       	brne	.+40     	; 0x16fc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16d4:	a5 e3       	ldi	r26, 0x35	; 53
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e5 e3       	ldi	r30, 0x35	; 53
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_writePin+0x13c>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_writePin+0x138>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	40 c0       	rjmp	.+128    	; 0x177c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16fc:	a5 e3       	ldi	r26, 0x35	; 53
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e5 e3       	ldi	r30, 0x35	; 53
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_writePin+0x164>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_writePin+0x160>
    171e:	80 95       	com	r24
    1720:	84 23       	and	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	2b c0       	rjmp	.+86     	; 0x177c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	a1 f4       	brne	.+40     	; 0x1754 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    172c:	a2 e3       	ldi	r26, 0x32	; 50
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e2 e3       	ldi	r30, 0x32	; 50
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <GPIO_writePin+0x194>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <GPIO_writePin+0x190>
    174e:	84 2b       	or	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	14 c0       	rjmp	.+40     	; 0x177c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1754:	a2 e3       	ldi	r26, 0x32	; 50
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e2 e3       	ldi	r30, 0x32	; 50
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <GPIO_writePin+0x1bc>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <GPIO_writePin+0x1b8>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <GPIO_readPin+0x6>
    1792:	00 d0       	rcall	.+0      	; 0x1794 <GPIO_readPin+0x8>
    1794:	0f 92       	push	r0
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	8a 83       	std	Y+2, r24	; 0x02
    179c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    179e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	88 30       	cpi	r24, 0x08	; 8
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <GPIO_readPin+0x1c>
    17a6:	84 c0       	rjmp	.+264    	; 0x18b0 <GPIO_readPin+0x124>
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	84 30       	cpi	r24, 0x04	; 4
    17ac:	08 f0       	brcs	.+2      	; 0x17b0 <GPIO_readPin+0x24>
    17ae:	80 c0       	rjmp	.+256    	; 0x18b0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	3d 83       	std	Y+5, r19	; 0x05
    17b8:	2c 83       	std	Y+4, r18	; 0x04
    17ba:	4c 81       	ldd	r20, Y+4	; 0x04
    17bc:	5d 81       	ldd	r21, Y+5	; 0x05
    17be:	41 30       	cpi	r20, 0x01	; 1
    17c0:	51 05       	cpc	r21, r1
    17c2:	79 f1       	breq	.+94     	; 0x1822 <GPIO_readPin+0x96>
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	9d 81       	ldd	r25, Y+5	; 0x05
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	91 05       	cpc	r25, r1
    17cc:	34 f4       	brge	.+12     	; 0x17da <GPIO_readPin+0x4e>
    17ce:	2c 81       	ldd	r18, Y+4	; 0x04
    17d0:	3d 81       	ldd	r19, Y+5	; 0x05
    17d2:	21 15       	cp	r18, r1
    17d4:	31 05       	cpc	r19, r1
    17d6:	69 f0       	breq	.+26     	; 0x17f2 <GPIO_readPin+0x66>
    17d8:	6b c0       	rjmp	.+214    	; 0x18b0 <GPIO_readPin+0x124>
    17da:	4c 81       	ldd	r20, Y+4	; 0x04
    17dc:	5d 81       	ldd	r21, Y+5	; 0x05
    17de:	42 30       	cpi	r20, 0x02	; 2
    17e0:	51 05       	cpc	r21, r1
    17e2:	b9 f1       	breq	.+110    	; 0x1852 <GPIO_readPin+0xc6>
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	91 05       	cpc	r25, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <GPIO_readPin+0x64>
    17ee:	49 c0       	rjmp	.+146    	; 0x1882 <GPIO_readPin+0xf6>
    17f0:	5f c0       	rjmp	.+190    	; 0x18b0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    17f2:	e9 e3       	ldi	r30, 0x39	; 57
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a9 01       	movw	r20, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_readPin+0x7e>
    1806:	55 95       	asr	r21
    1808:	47 95       	ror	r20
    180a:	8a 95       	dec	r24
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_readPin+0x7a>
    180e:	ca 01       	movw	r24, r20
    1810:	81 70       	andi	r24, 0x01	; 1
    1812:	90 70       	andi	r25, 0x00	; 0
    1814:	88 23       	and	r24, r24
    1816:	19 f0       	breq	.+6      	; 0x181e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	49 c0       	rjmp	.+146    	; 0x18b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    181e:	19 82       	std	Y+1, r1	; 0x01
    1820:	47 c0       	rjmp	.+142    	; 0x18b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1822:	e6 e3       	ldi	r30, 0x36	; 54
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a9 01       	movw	r20, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_readPin+0xae>
    1836:	55 95       	asr	r21
    1838:	47 95       	ror	r20
    183a:	8a 95       	dec	r24
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_readPin+0xaa>
    183e:	ca 01       	movw	r24, r20
    1840:	81 70       	andi	r24, 0x01	; 1
    1842:	90 70       	andi	r25, 0x00	; 0
    1844:	88 23       	and	r24, r24
    1846:	19 f0       	breq	.+6      	; 0x184e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	31 c0       	rjmp	.+98     	; 0x18b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    184e:	19 82       	std	Y+1, r1	; 0x01
    1850:	2f c0       	rjmp	.+94     	; 0x18b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1852:	e3 e3       	ldi	r30, 0x33	; 51
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a9 01       	movw	r20, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <GPIO_readPin+0xde>
    1866:	55 95       	asr	r21
    1868:	47 95       	ror	r20
    186a:	8a 95       	dec	r24
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <GPIO_readPin+0xda>
    186e:	ca 01       	movw	r24, r20
    1870:	81 70       	andi	r24, 0x01	; 1
    1872:	90 70       	andi	r25, 0x00	; 0
    1874:	88 23       	and	r24, r24
    1876:	19 f0       	breq	.+6      	; 0x187e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	19 c0       	rjmp	.+50     	; 0x18b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    187e:	19 82       	std	Y+1, r1	; 0x01
    1880:	17 c0       	rjmp	.+46     	; 0x18b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1882:	e0 e3       	ldi	r30, 0x30	; 48
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a9 01       	movw	r20, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <GPIO_readPin+0x10e>
    1896:	55 95       	asr	r21
    1898:	47 95       	ror	r20
    189a:	8a 95       	dec	r24
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <GPIO_readPin+0x10a>
    189e:	ca 01       	movw	r24, r20
    18a0:	81 70       	andi	r24, 0x01	; 1
    18a2:	90 70       	andi	r25, 0x00	; 0
    18a4:	88 23       	and	r24, r24
    18a6:	19 f0       	breq	.+6      	; 0x18ae <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ae:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <GPIO_setupPortDirection+0x6>
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <GPIO_setupPortDirection+0x8>
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	90 f5       	brcc	.+100    	; 0x193c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	3c 83       	std	Y+4, r19	; 0x04
    18e0:	2b 83       	std	Y+3, r18	; 0x03
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	91 05       	cpc	r25, r1
    18ea:	d1 f0       	breq	.+52     	; 0x1920 <GPIO_setupPortDirection+0x5e>
    18ec:	2b 81       	ldd	r18, Y+3	; 0x03
    18ee:	3c 81       	ldd	r19, Y+4	; 0x04
    18f0:	22 30       	cpi	r18, 0x02	; 2
    18f2:	31 05       	cpc	r19, r1
    18f4:	2c f4       	brge	.+10     	; 0x1900 <GPIO_setupPortDirection+0x3e>
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	61 f0       	breq	.+24     	; 0x1916 <GPIO_setupPortDirection+0x54>
    18fe:	1e c0       	rjmp	.+60     	; 0x193c <GPIO_setupPortDirection+0x7a>
    1900:	2b 81       	ldd	r18, Y+3	; 0x03
    1902:	3c 81       	ldd	r19, Y+4	; 0x04
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	81 f0       	breq	.+32     	; 0x192a <GPIO_setupPortDirection+0x68>
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	83 30       	cpi	r24, 0x03	; 3
    1910:	91 05       	cpc	r25, r1
    1912:	81 f0       	breq	.+32     	; 0x1934 <GPIO_setupPortDirection+0x72>
    1914:	13 c0       	rjmp	.+38     	; 0x193c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1916:	ea e3       	ldi	r30, 0x3A	; 58
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	80 83       	st	Z, r24
    191e:	0e c0       	rjmp	.+28     	; 0x193c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1920:	e7 e3       	ldi	r30, 0x37	; 55
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	80 83       	st	Z, r24
    1928:	09 c0       	rjmp	.+18     	; 0x193c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    192a:	e4 e3       	ldi	r30, 0x34	; 52
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	80 83       	st	Z, r24
    1932:	04 c0       	rjmp	.+8      	; 0x193c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1934:	e1 e3       	ldi	r30, 0x31	; 49
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	80 83       	st	Z, r24
			break;
		}
	}
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <GPIO_writePort+0x6>
    1950:	00 d0       	rcall	.+0      	; 0x1952 <GPIO_writePort+0x8>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	84 30       	cpi	r24, 0x04	; 4
    195e:	90 f5       	brcc	.+100    	; 0x19c4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3c 83       	std	Y+4, r19	; 0x04
    1968:	2b 83       	std	Y+3, r18	; 0x03
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	9c 81       	ldd	r25, Y+4	; 0x04
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	91 05       	cpc	r25, r1
    1972:	d1 f0       	breq	.+52     	; 0x19a8 <GPIO_writePort+0x5e>
    1974:	2b 81       	ldd	r18, Y+3	; 0x03
    1976:	3c 81       	ldd	r19, Y+4	; 0x04
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	2c f4       	brge	.+10     	; 0x1988 <GPIO_writePort+0x3e>
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	9c 81       	ldd	r25, Y+4	; 0x04
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	61 f0       	breq	.+24     	; 0x199e <GPIO_writePort+0x54>
    1986:	1e c0       	rjmp	.+60     	; 0x19c4 <GPIO_writePort+0x7a>
    1988:	2b 81       	ldd	r18, Y+3	; 0x03
    198a:	3c 81       	ldd	r19, Y+4	; 0x04
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	81 f0       	breq	.+32     	; 0x19b2 <GPIO_writePort+0x68>
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	83 30       	cpi	r24, 0x03	; 3
    1998:	91 05       	cpc	r25, r1
    199a:	81 f0       	breq	.+32     	; 0x19bc <GPIO_writePort+0x72>
    199c:	13 c0       	rjmp	.+38     	; 0x19c4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    199e:	eb e3       	ldi	r30, 0x3B	; 59
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	80 83       	st	Z, r24
    19a6:	0e c0       	rjmp	.+28     	; 0x19c4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    19a8:	e8 e3       	ldi	r30, 0x38	; 56
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	80 83       	st	Z, r24
    19b0:	09 c0       	rjmp	.+18     	; 0x19c4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    19b2:	e5 e3       	ldi	r30, 0x35	; 53
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	80 83       	st	Z, r24
    19ba:	04 c0       	rjmp	.+8      	; 0x19c4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    19bc:	e2 e3       	ldi	r30, 0x32	; 50
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	80 83       	st	Z, r24
			break;
		}
	}
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <GPIO_readPort+0x6>
    19d8:	00 d0       	rcall	.+0      	; 0x19da <GPIO_readPort+0x8>
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19e0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	84 30       	cpi	r24, 0x04	; 4
    19e6:	90 f5       	brcc	.+100    	; 0x1a4c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	3c 83       	std	Y+4, r19	; 0x04
    19f0:	2b 83       	std	Y+3, r18	; 0x03
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	91 05       	cpc	r25, r1
    19fa:	d1 f0       	breq	.+52     	; 0x1a30 <GPIO_readPort+0x5e>
    19fc:	2b 81       	ldd	r18, Y+3	; 0x03
    19fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	31 05       	cpc	r19, r1
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <GPIO_readPort+0x3e>
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	61 f0       	breq	.+24     	; 0x1a26 <GPIO_readPort+0x54>
    1a0e:	1e c0       	rjmp	.+60     	; 0x1a4c <GPIO_readPort+0x7a>
    1a10:	2b 81       	ldd	r18, Y+3	; 0x03
    1a12:	3c 81       	ldd	r19, Y+4	; 0x04
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	81 f0       	breq	.+32     	; 0x1a3a <GPIO_readPort+0x68>
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	91 05       	cpc	r25, r1
    1a22:	81 f0       	breq	.+32     	; 0x1a44 <GPIO_readPort+0x72>
    1a24:	13 c0       	rjmp	.+38     	; 0x1a4c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a26:	e9 e3       	ldi	r30, 0x39	; 57
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	0e c0       	rjmp	.+28     	; 0x1a4c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a30:	e6 e3       	ldi	r30, 0x36	; 54
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	09 c0       	rjmp	.+18     	; 0x1a4c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a3a:	e3 e3       	ldi	r30, 0x33	; 51
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	04 c0       	rjmp	.+8      	; 0x1a4c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a44:	e0 e3       	ldi	r30, 0x30	; 48
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	60 97       	sbiw	r28, 0x10	; 16
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	64 e0       	ldi	r22, 0x04	; 4
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	65 e0       	ldi	r22, 0x05	; 5
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	66 e0       	ldi	r22, 0x06	; 6
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	67 e0       	ldi	r22, 0x07	; 7
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	63 e0       	ldi	r22, 0x03	; 3
    1aa6:	40 e0       	ldi	r20, 0x00	; 0
    1aa8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	64 e0       	ldi	r22, 0x04	; 4
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1ab6:	83 e0       	ldi	r24, 0x03	; 3
    1ab8:	65 e0       	ldi	r22, 0x05	; 5
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1ac0:	1f 86       	std	Y+15, r1	; 0x0f
    1ac2:	b4 c0       	rjmp	.+360    	; 0x1c2c <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	9c 5f       	subi	r25, 0xFC	; 252
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	69 2f       	mov	r22, r25
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad6:	98 2f       	mov	r25, r24
    1ad8:	9c 5f       	subi	r25, 0xFC	; 252
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	69 2f       	mov	r22, r25
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ae4:	18 8a       	std	Y+16, r1	; 0x10
    1ae6:	22 c0       	rjmp	.+68     	; 0x1b2c <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1ae8:	88 89       	ldd	r24, Y+16	; 0x10
    1aea:	98 2f       	mov	r25, r24
    1aec:	9e 5f       	subi	r25, 0xFE	; 254
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	69 2f       	mov	r22, r25
    1af2:	0e 94 c6 0b 	call	0x178c	; 0x178c <GPIO_readPin>
    1af6:	88 23       	and	r24, r24
    1af8:	b1 f4       	brne	.+44     	; 0x1b26 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1afa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	98 2f       	mov	r25, r24
    1b0a:	88 89       	ldd	r24, Y+16	; 0x10
    1b0c:	89 0f       	add	r24, r25
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1b14:	60 96       	adiw	r28, 0x10	; 16
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1b26:	88 89       	ldd	r24, Y+16	; 0x10
    1b28:	8f 5f       	subi	r24, 0xFF	; 255
    1b2a:	88 8b       	std	Y+16, r24	; 0x10
    1b2c:	88 89       	ldd	r24, Y+16	; 0x10
    1b2e:	84 30       	cpi	r24, 0x04	; 4
    1b30:	d8 f2       	brcs	.-74     	; 0x1ae8 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b34:	98 2f       	mov	r25, r24
    1b36:	9c 5f       	subi	r25, 0xFC	; 252
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	69 2f       	mov	r22, r25
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a0 ea       	ldi	r26, 0xA0	; 160
    1b48:	b0 e4       	ldi	r27, 0x40	; 64
    1b4a:	8b 87       	std	Y+11, r24	; 0x0b
    1b4c:	9c 87       	std	Y+12, r25	; 0x0c
    1b4e:	ad 87       	std	Y+13, r26	; 0x0d
    1b50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a ef       	ldi	r20, 0xFA	; 250
    1b60:	54 e4       	ldi	r21, 0x44	; 68
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	8f 83       	std	Y+7, r24	; 0x07
    1b6c:	98 87       	std	Y+8, r25	; 0x08
    1b6e:	a9 87       	std	Y+9, r26	; 0x09
    1b70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b72:	6f 81       	ldd	r22, Y+7	; 0x07
    1b74:	78 85       	ldd	r23, Y+8	; 0x08
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9e 83       	std	Y+6, r25	; 0x06
    1b90:	8d 83       	std	Y+5, r24	; 0x05
    1b92:	3f c0       	rjmp	.+126    	; 0x1c12 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1b94:	6f 81       	ldd	r22, Y+7	; 0x07
    1b96:	78 85       	ldd	r23, Y+8	; 0x08
    1b98:	89 85       	ldd	r24, Y+9	; 0x09
    1b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	57 e4       	ldi	r21, 0x47	; 71
    1ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba8:	18 16       	cp	r1, r24
    1baa:	4c f5       	brge	.+82     	; 0x1bfe <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e2       	ldi	r20, 0x20	; 32
    1bba:	51 e4       	ldi	r21, 0x41	; 65
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <KEYPAD_getPressedKey+0x198>
    1bd6:	88 ec       	ldi	r24, 0xC8	; 200
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9c 83       	std	Y+4, r25	; 0x04
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <KEYPAD_getPressedKey+0x186>
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <KEYPAD_getPressedKey+0x17a>
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1c00:	78 85       	ldd	r23, Y+8	; 0x08
    1c02:	89 85       	ldd	r24, Y+9	; 0x09
    1c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	9a 83       	std	Y+2, r25	; 0x02
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <KEYPAD_getPressedKey+0x1c2>
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	8f 87       	std	Y+15, r24	; 0x0f
    1c2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2e:	84 30       	cpi	r24, 0x04	; 4
    1c30:	08 f4       	brcc	.+2      	; 0x1c34 <KEYPAD_getPressedKey+0x1d8>
    1c32:	48 cf       	rjmp	.-368    	; 0x1ac4 <KEYPAD_getPressedKey+0x68>
    1c34:	45 cf       	rjmp	.-374    	; 0x1ac0 <KEYPAD_getPressedKey+0x64>

00001c36 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c44:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3c 83       	std	Y+4, r19	; 0x04
    1c4e:	2b 83       	std	Y+3, r18	; 0x03
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	88 30       	cpi	r24, 0x08	; 8
    1c56:	91 05       	cpc	r25, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c5a:	70 c0       	rjmp	.+224    	; 0x1d3c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c60:	29 30       	cpi	r18, 0x09	; 9
    1c62:	31 05       	cpc	r19, r1
    1c64:	5c f5       	brge	.+86     	; 0x1cbc <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	84 30       	cpi	r24, 0x04	; 4
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c70:	59 c0       	rjmp	.+178    	; 0x1d24 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c72:	2b 81       	ldd	r18, Y+3	; 0x03
    1c74:	3c 81       	ldd	r19, Y+4	; 0x04
    1c76:	25 30       	cpi	r18, 0x05	; 5
    1c78:	31 05       	cpc	r19, r1
    1c7a:	9c f4       	brge	.+38     	; 0x1ca2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	91 05       	cpc	r25, r1
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c86:	48 c0       	rjmp	.+144    	; 0x1d18 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8c:	23 30       	cpi	r18, 0x03	; 3
    1c8e:	31 05       	cpc	r19, r1
    1c90:	0c f0       	brlt	.+2      	; 0x1c94 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c92:	45 c0       	rjmp	.+138    	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c9e:	39 c0       	rjmp	.+114    	; 0x1d12 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ca0:	67 c0       	rjmp	.+206    	; 0x1d70 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1ca2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca6:	26 30       	cpi	r18, 0x06	; 6
    1ca8:	31 05       	cpc	r19, r1
    1caa:	09 f4       	brne	.+2      	; 0x1cae <KEYPAD_4x4_adjustKeyNumber+0x78>
    1cac:	41 c0       	rjmp	.+130    	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	87 30       	cpi	r24, 0x07	; 7
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	0c f0       	brlt	.+2      	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x84>
    1cb8:	3e c0       	rjmp	.+124    	; 0x1d36 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1cba:	37 c0       	rjmp	.+110    	; 0x1d2a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc0:	2c 30       	cpi	r18, 0x0C	; 12
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1cc6:	46 c0       	rjmp	.+140    	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	8d 30       	cpi	r24, 0x0D	; 13
    1cce:	91 05       	cpc	r25, r1
    1cd0:	5c f4       	brge	.+22     	; 0x1ce8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1cd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd6:	2a 30       	cpi	r18, 0x0A	; 10
    1cd8:	31 05       	cpc	r19, r1
    1cda:	b1 f1       	breq	.+108    	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	8b 30       	cpi	r24, 0x0B	; 11
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	a4 f5       	brge	.+104    	; 0x1d4e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1ce6:	2d c0       	rjmp	.+90     	; 0x1d42 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cea:	3c 81       	ldd	r19, Y+4	; 0x04
    1cec:	2e 30       	cpi	r18, 0x0E	; 14
    1cee:	31 05       	cpc	r19, r1
    1cf0:	b9 f1       	breq	.+110    	; 0x1d60 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	8e 30       	cpi	r24, 0x0E	; 14
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	7c f1       	brlt	.+94     	; 0x1d5a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1cfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1d00:	2f 30       	cpi	r18, 0x0F	; 15
    1d02:	31 05       	cpc	r19, r1
    1d04:	79 f1       	breq	.+94     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	80 31       	cpi	r24, 0x10	; 16
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	69 f1       	breq	.+90     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1d10:	2f c0       	rjmp	.+94     	; 0x1d70 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1d12:	87 e0       	ldi	r24, 0x07	; 7
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	2e c0       	rjmp	.+92     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1d18:	88 e0       	ldi	r24, 0x08	; 8
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	2b c0       	rjmp	.+86     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1d1e:	89 e0       	ldi	r24, 0x09	; 9
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	28 c0       	rjmp	.+80     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1d24:	85 e2       	ldi	r24, 0x25	; 37
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	25 c0       	rjmp	.+74     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1d2a:	84 e0       	ldi	r24, 0x04	; 4
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	22 c0       	rjmp	.+68     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1d30:	85 e0       	ldi	r24, 0x05	; 5
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	1f c0       	rjmp	.+62     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1d36:	86 e0       	ldi	r24, 0x06	; 6
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	1c c0       	rjmp	.+56     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d3c:	8a e2       	ldi	r24, 0x2A	; 42
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	19 c0       	rjmp	.+50     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	16 c0       	rjmp	.+44     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	13 c0       	rjmp	.+38     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	10 c0       	rjmp	.+32     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d54:	8d e2       	ldi	r24, 0x2D	; 45
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	0d c0       	rjmp	.+26     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1d5a:	8d e0       	ldi	r24, 0x0D	; 13
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	0a c0       	rjmp	.+20     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1d60:	19 82       	std	Y+1, r1	; 0x01
    1d62:	08 c0       	rjmp	.+16     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d64:	8d e3       	ldi	r24, 0x3D	; 61
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d6a:	8b e2       	ldi	r24, 0x2B	; 43
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	2e 97       	sbiw	r28, 0x0e	; 14
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	62 e0       	ldi	r22, 0x02	; 2
    1da6:	41 e0       	ldi	r20, 0x01	; 1
    1da8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 ea       	ldi	r26, 0xA0	; 160
    1db2:	b1 e4       	ldi	r27, 0x41	; 65
    1db4:	8b 87       	std	Y+11, r24	; 0x0b
    1db6:	9c 87       	std	Y+12, r25	; 0x0c
    1db8:	ad 87       	std	Y+13, r26	; 0x0d
    1dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a ef       	ldi	r20, 0xFA	; 250
    1dca:	54 e4       	ldi	r21, 0x44	; 68
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8f 83       	std	Y+7, r24	; 0x07
    1dd6:	98 87       	std	Y+8, r25	; 0x08
    1dd8:	a9 87       	std	Y+9, r26	; 0x09
    1dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <LCD_init+0x7a>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <LCD_init+0xda>
    1e40:	88 ec       	ldi	r24, 0xC8	; 200
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_init+0xc8>
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <LCD_init+0xbc>
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_init+0x104>
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	63 e0       	ldi	r22, 0x03	; 3
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	64 e0       	ldi	r22, 0x04	; 4
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	65 e0       	ldi	r22, 0x05	; 5
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	66 e0       	ldi	r22, 0x06	; 6
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1eb8:	83 e3       	ldi	r24, 0x33	; 51
    1eba:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1ebe:	82 e3       	ldi	r24, 0x32	; 50
    1ec0:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1ec4:	88 e2       	ldi	r24, 0x28	; 40
    1ec6:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1eca:	8c e0       	ldi	r24, 0x0C	; 12
    1ecc:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_sendCommand>
}
    1ed6:	2e 96       	adiw	r28, 0x0e	; 14
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1ee8:	0f 93       	push	r16
    1eea:	1f 93       	push	r17
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	c3 56       	subi	r28, 0x63	; 99
    1ef6:	d0 40       	sbci	r29, 0x00	; 0
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	cd bf       	out	0x3d, r28	; 61
    1f02:	fe 01       	movw	r30, r28
    1f04:	ed 59       	subi	r30, 0x9D	; 157
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	61 e0       	ldi	r22, 0x01	; 1
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    1f14:	fe 01       	movw	r30, r28
    1f16:	e1 5a       	subi	r30, 0xA1	; 161
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e8       	ldi	r26, 0x80	; 128
    1f20:	bf e3       	ldi	r27, 0x3F	; 63
    1f22:	80 83       	st	Z, r24
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	a2 83       	std	Z+2, r26	; 0x02
    1f28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	05 5a       	subi	r16, 0xA5	; 165
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	e1 5a       	subi	r30, 0xA1	; 161
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a ef       	ldi	r20, 0xFA	; 250
    1f44:	54 e4       	ldi	r21, 0x44	; 68
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	f8 01       	movw	r30, r16
    1f50:	80 83       	st	Z, r24
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	a2 83       	std	Z+2, r26	; 0x02
    1f56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f58:	fe 01       	movw	r30, r28
    1f5a:	e5 5a       	subi	r30, 0xA5	; 165
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	60 81       	ld	r22, Z
    1f60:	71 81       	ldd	r23, Z+1	; 0x01
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	44 f4       	brge	.+16     	; 0x1f86 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1f76:	fe 01       	movw	r30, r28
    1f78:	e7 5a       	subi	r30, 0xA7	; 167
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	80 83       	st	Z, r24
    1f84:	64 c0       	rjmp	.+200    	; 0x204e <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1f86:	fe 01       	movw	r30, r28
    1f88:	e5 5a       	subi	r30, 0xA5	; 165
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	60 81       	ld	r22, Z
    1f8e:	71 81       	ldd	r23, Z+1	; 0x01
    1f90:	82 81       	ldd	r24, Z+2	; 0x02
    1f92:	93 81       	ldd	r25, Z+3	; 0x03
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	0c f0       	brlt	.+2      	; 0x1fa6 <LCD_sendCommand+0xbe>
    1fa4:	43 c0       	rjmp	.+134    	; 0x202c <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e1 5a       	subi	r30, 0xA1	; 161
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	51 e4       	ldi	r21, 0x41	; 65
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	8e 01       	movw	r16, r28
    1fc6:	07 5a       	subi	r16, 0xA7	; 167
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24
    1fdc:	1f c0       	rjmp	.+62     	; 0x201c <LCD_sendCommand+0x134>
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e9 5a       	subi	r30, 0xA9	; 169
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	88 ec       	ldi	r24, 0xC8	; 200
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
    1fec:	fe 01       	movw	r30, r28
    1fee:	e9 5a       	subi	r30, 0xA9	; 169
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_sendCommand+0x10e>
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e9 5a       	subi	r30, 0xA9	; 169
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	de 01       	movw	r26, r28
    2006:	a7 5a       	subi	r26, 0xA7	; 167
    2008:	bf 4f       	sbci	r27, 0xFF	; 255
    200a:	fe 01       	movw	r30, r28
    200c:	e7 5a       	subi	r30, 0xA7	; 167
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 81       	ld	r24, Z
    2012:	91 81       	ldd	r25, Z+1	; 0x01
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	11 96       	adiw	r26, 0x01	; 1
    2018:	9c 93       	st	X, r25
    201a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	fe 01       	movw	r30, r28
    201e:	e7 5a       	subi	r30, 0xA7	; 167
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	d1 f6       	brne	.-76     	; 0x1fde <LCD_sendCommand+0xf6>
    202a:	27 c0       	rjmp	.+78     	; 0x207a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	8e 01       	movw	r16, r28
    202e:	07 5a       	subi	r16, 0xA7	; 167
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	fe 01       	movw	r30, r28
    2034:	e5 5a       	subi	r30, 0xA5	; 165
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	93 81       	ldd	r25, Z+3	; 0x03
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	f8 01       	movw	r30, r16
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
    204e:	de 01       	movw	r26, r28
    2050:	ab 5a       	subi	r26, 0xAB	; 171
    2052:	bf 4f       	sbci	r27, 0xFF	; 255
    2054:	fe 01       	movw	r30, r28
    2056:	e7 5a       	subi	r30, 0xA7	; 167
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	8d 93       	st	X+, r24
    2060:	9c 93       	st	X, r25
    2062:	fe 01       	movw	r30, r28
    2064:	eb 5a       	subi	r30, 0xAB	; 171
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 81       	ld	r24, Z
    206a:	91 81       	ldd	r25, Z+1	; 0x01
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_sendCommand+0x184>
    2070:	fe 01       	movw	r30, r28
    2072:	eb 5a       	subi	r30, 0xAB	; 171
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	62 e0       	ldi	r22, 0x02	; 2
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    2084:	fe 01       	movw	r30, r28
    2086:	ef 5a       	subi	r30, 0xAF	; 175
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a0 e8       	ldi	r26, 0x80	; 128
    2090:	bf e3       	ldi	r27, 0x3F	; 63
    2092:	80 83       	st	Z, r24
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	a2 83       	std	Z+2, r26	; 0x02
    2098:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209a:	8e 01       	movw	r16, r28
    209c:	03 5b       	subi	r16, 0xB3	; 179
    209e:	1f 4f       	sbci	r17, 0xFF	; 255
    20a0:	fe 01       	movw	r30, r28
    20a2:	ef 5a       	subi	r30, 0xAF	; 175
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a ef       	ldi	r20, 0xFA	; 250
    20b4:	54 e4       	ldi	r21, 0x44	; 68
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	f8 01       	movw	r30, r16
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	a2 83       	std	Z+2, r26	; 0x02
    20c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20c8:	fe 01       	movw	r30, r28
    20ca:	e3 5b       	subi	r30, 0xB3	; 179
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5f e3       	ldi	r21, 0x3F	; 63
    20de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	44 f4       	brge	.+16     	; 0x20f6 <LCD_sendCommand+0x20e>
		__ticks = 1;
    20e6:	fe 01       	movw	r30, r28
    20e8:	e5 5b       	subi	r30, 0xB5	; 181
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	80 83       	st	Z, r24
    20f4:	64 c0       	rjmp	.+200    	; 0x21be <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    20f6:	fe 01       	movw	r30, r28
    20f8:	e3 5b       	subi	r30, 0xB3	; 179
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	3f ef       	ldi	r19, 0xFF	; 255
    2108:	4f e7       	ldi	r20, 0x7F	; 127
    210a:	57 e4       	ldi	r21, 0x47	; 71
    210c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2110:	18 16       	cp	r1, r24
    2112:	0c f0       	brlt	.+2      	; 0x2116 <LCD_sendCommand+0x22e>
    2114:	43 c0       	rjmp	.+134    	; 0x219c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	fe 01       	movw	r30, r28
    2118:	ef 5a       	subi	r30, 0xAF	; 175
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	60 81       	ld	r22, Z
    211e:	71 81       	ldd	r23, Z+1	; 0x01
    2120:	82 81       	ldd	r24, Z+2	; 0x02
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e2       	ldi	r20, 0x20	; 32
    212a:	51 e4       	ldi	r21, 0x41	; 65
    212c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	8e 01       	movw	r16, r28
    2136:	05 5b       	subi	r16, 0xB5	; 181
    2138:	1f 4f       	sbci	r17, 0xFF	; 255
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	f8 01       	movw	r30, r16
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
    214c:	1f c0       	rjmp	.+62     	; 0x218c <LCD_sendCommand+0x2a4>
    214e:	fe 01       	movw	r30, r28
    2150:	e7 5b       	subi	r30, 0xB7	; 183
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	88 ec       	ldi	r24, 0xC8	; 200
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	91 83       	std	Z+1, r25	; 0x01
    215a:	80 83       	st	Z, r24
    215c:	fe 01       	movw	r30, r28
    215e:	e7 5b       	subi	r30, 0xB7	; 183
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	91 81       	ldd	r25, Z+1	; 0x01
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <LCD_sendCommand+0x27e>
    216a:	fe 01       	movw	r30, r28
    216c:	e7 5b       	subi	r30, 0xB7	; 183
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2174:	de 01       	movw	r26, r28
    2176:	a5 5b       	subi	r26, 0xB5	; 181
    2178:	bf 4f       	sbci	r27, 0xFF	; 255
    217a:	fe 01       	movw	r30, r28
    217c:	e5 5b       	subi	r30, 0xB5	; 181
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 81       	ld	r24, Z
    2182:	91 81       	ldd	r25, Z+1	; 0x01
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	11 96       	adiw	r26, 0x01	; 1
    2188:	9c 93       	st	X, r25
    218a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	fe 01       	movw	r30, r28
    218e:	e5 5b       	subi	r30, 0xB5	; 181
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	d1 f6       	brne	.-76     	; 0x214e <LCD_sendCommand+0x266>
    219a:	27 c0       	rjmp	.+78     	; 0x21ea <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219c:	8e 01       	movw	r16, r28
    219e:	05 5b       	subi	r16, 0xB5	; 181
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	fe 01       	movw	r30, r28
    21a4:	e3 5b       	subi	r30, 0xB3	; 179
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	f8 01       	movw	r30, r16
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
    21be:	de 01       	movw	r26, r28
    21c0:	a9 5b       	subi	r26, 0xB9	; 185
    21c2:	bf 4f       	sbci	r27, 0xFF	; 255
    21c4:	fe 01       	movw	r30, r28
    21c6:	e5 5b       	subi	r30, 0xB5	; 181
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	80 81       	ld	r24, Z
    21cc:	91 81       	ldd	r25, Z+1	; 0x01
    21ce:	8d 93       	st	X+, r24
    21d0:	9c 93       	st	X, r25
    21d2:	fe 01       	movw	r30, r28
    21d4:	e9 5b       	subi	r30, 0xB9	; 185
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	80 81       	ld	r24, Z
    21da:	91 81       	ldd	r25, Z+1	; 0x01
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <LCD_sendCommand+0x2f4>
    21e0:	fe 01       	movw	r30, r28
    21e2:	e9 5b       	subi	r30, 0xB9	; 185
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    21ea:	fe 01       	movw	r30, r28
    21ec:	ed 59       	subi	r30, 0x9D	; 157
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	80 81       	ld	r24, Z
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	80 71       	andi	r24, 0x10	; 16
    21f8:	90 70       	andi	r25, 0x00	; 0
    21fa:	95 95       	asr	r25
    21fc:	87 95       	ror	r24
    21fe:	95 95       	asr	r25
    2200:	87 95       	ror	r24
    2202:	95 95       	asr	r25
    2204:	87 95       	ror	r24
    2206:	95 95       	asr	r25
    2208:	87 95       	ror	r24
    220a:	98 2f       	mov	r25, r24
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	63 e0       	ldi	r22, 0x03	; 3
    2210:	49 2f       	mov	r20, r25
    2212:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2216:	fe 01       	movw	r30, r28
    2218:	ed 59       	subi	r30, 0x9D	; 157
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	80 72       	andi	r24, 0x20	; 32
    2224:	90 70       	andi	r25, 0x00	; 0
    2226:	95 95       	asr	r25
    2228:	87 95       	ror	r24
    222a:	95 95       	asr	r25
    222c:	87 95       	ror	r24
    222e:	95 95       	asr	r25
    2230:	87 95       	ror	r24
    2232:	95 95       	asr	r25
    2234:	87 95       	ror	r24
    2236:	95 95       	asr	r25
    2238:	87 95       	ror	r24
    223a:	98 2f       	mov	r25, r24
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	64 e0       	ldi	r22, 0x04	; 4
    2240:	49 2f       	mov	r20, r25
    2242:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2246:	fe 01       	movw	r30, r28
    2248:	ed 59       	subi	r30, 0x9D	; 157
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	80 74       	andi	r24, 0x40	; 64
    2254:	90 70       	andi	r25, 0x00	; 0
    2256:	08 2e       	mov	r0, r24
    2258:	89 2f       	mov	r24, r25
    225a:	00 0c       	add	r0, r0
    225c:	88 1f       	adc	r24, r24
    225e:	99 0b       	sbc	r25, r25
    2260:	00 0c       	add	r0, r0
    2262:	88 1f       	adc	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	98 2f       	mov	r25, r24
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	65 e0       	ldi	r22, 0x05	; 5
    226c:	49 2f       	mov	r20, r25
    226e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2272:	fe 01       	movw	r30, r28
    2274:	ed 59       	subi	r30, 0x9D	; 157
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	98 2f       	mov	r25, r24
    227c:	99 1f       	adc	r25, r25
    227e:	99 27       	eor	r25, r25
    2280:	99 1f       	adc	r25, r25
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	66 e0       	ldi	r22, 0x06	; 6
    2286:	49 2f       	mov	r20, r25
    2288:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    228c:	fe 01       	movw	r30, r28
    228e:	ed 5b       	subi	r30, 0xBD	; 189
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a0 e8       	ldi	r26, 0x80	; 128
    2298:	bf e3       	ldi	r27, 0x3F	; 63
    229a:	80 83       	st	Z, r24
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	a2 83       	std	Z+2, r26	; 0x02
    22a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a2:	8e 01       	movw	r16, r28
    22a4:	01 5c       	subi	r16, 0xC1	; 193
    22a6:	1f 4f       	sbci	r17, 0xFF	; 255
    22a8:	fe 01       	movw	r30, r28
    22aa:	ed 5b       	subi	r30, 0xBD	; 189
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	60 81       	ld	r22, Z
    22b0:	71 81       	ldd	r23, Z+1	; 0x01
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	4a ef       	ldi	r20, 0xFA	; 250
    22bc:	54 e4       	ldi	r21, 0x44	; 68
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	f8 01       	movw	r30, r16
    22c8:	80 83       	st	Z, r24
    22ca:	91 83       	std	Z+1, r25	; 0x01
    22cc:	a2 83       	std	Z+2, r26	; 0x02
    22ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22d0:	fe 01       	movw	r30, r28
    22d2:	ff 96       	adiw	r30, 0x3f	; 63
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	93 81       	ldd	r25, Z+3	; 0x03
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <LCD_sendCommand+0x40e>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9e af       	std	Y+62, r25	; 0x3e
    22f2:	8d af       	std	Y+61, r24	; 0x3d
    22f4:	46 c0       	rjmp	.+140    	; 0x2382 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    22f6:	fe 01       	movw	r30, r28
    22f8:	ff 96       	adiw	r30, 0x3f	; 63
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	3f ef       	ldi	r19, 0xFF	; 255
    2306:	4f e7       	ldi	r20, 0x7F	; 127
    2308:	57 e4       	ldi	r21, 0x47	; 71
    230a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230e:	18 16       	cp	r1, r24
    2310:	64 f5       	brge	.+88     	; 0x236a <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2312:	fe 01       	movw	r30, r28
    2314:	ed 5b       	subi	r30, 0xBD	; 189
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e af       	std	Y+62, r25	; 0x3e
    233e:	8d af       	std	Y+61, r24	; 0x3d
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <LCD_sendCommand+0x478>
    2342:	88 ec       	ldi	r24, 0xC8	; 200
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c af       	std	Y+60, r25	; 0x3c
    2348:	8b af       	std	Y+59, r24	; 0x3b
    234a:	8b ad       	ldd	r24, Y+59	; 0x3b
    234c:	9c ad       	ldd	r25, Y+60	; 0x3c
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_sendCommand+0x466>
    2352:	9c af       	std	Y+60, r25	; 0x3c
    2354:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8d ad       	ldd	r24, Y+61	; 0x3d
    2358:	9e ad       	ldd	r25, Y+62	; 0x3e
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9e af       	std	Y+62, r25	; 0x3e
    235e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8d ad       	ldd	r24, Y+61	; 0x3d
    2362:	9e ad       	ldd	r25, Y+62	; 0x3e
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <LCD_sendCommand+0x45a>
    2368:	16 c0       	rjmp	.+44     	; 0x2396 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	fe 01       	movw	r30, r28
    236c:	ff 96       	adiw	r30, 0x3f	; 63
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	9e af       	std	Y+62, r25	; 0x3e
    2380:	8d af       	std	Y+61, r24	; 0x3d
    2382:	8d ad       	ldd	r24, Y+61	; 0x3d
    2384:	9e ad       	ldd	r25, Y+62	; 0x3e
    2386:	9a af       	std	Y+58, r25	; 0x3a
    2388:	89 af       	std	Y+57, r24	; 0x39
    238a:	89 ad       	ldd	r24, Y+57	; 0x39
    238c:	9a ad       	ldd	r25, Y+58	; 0x3a
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <LCD_sendCommand+0x4a6>
    2392:	9a af       	std	Y+58, r25	; 0x3a
    2394:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	62 e0       	ldi	r22, 0x02	; 2
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e8       	ldi	r26, 0x80	; 128
    23a6:	bf e3       	ldi	r27, 0x3F	; 63
    23a8:	8d ab       	std	Y+53, r24	; 0x35
    23aa:	9e ab       	std	Y+54, r25	; 0x36
    23ac:	af ab       	std	Y+55, r26	; 0x37
    23ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	6d a9       	ldd	r22, Y+53	; 0x35
    23b2:	7e a9       	ldd	r23, Y+54	; 0x36
    23b4:	8f a9       	ldd	r24, Y+55	; 0x37
    23b6:	98 ad       	ldd	r25, Y+56	; 0x38
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a ef       	ldi	r20, 0xFA	; 250
    23be:	54 e4       	ldi	r21, 0x44	; 68
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	89 ab       	std	Y+49, r24	; 0x31
    23ca:	9a ab       	std	Y+50, r25	; 0x32
    23cc:	ab ab       	std	Y+51, r26	; 0x33
    23ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23d0:	69 a9       	ldd	r22, Y+49	; 0x31
    23d2:	7a a9       	ldd	r23, Y+50	; 0x32
    23d4:	8b a9       	ldd	r24, Y+51	; 0x33
    23d6:	9c a9       	ldd	r25, Y+52	; 0x34
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	5f e3       	ldi	r21, 0x3F	; 63
    23e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e4:	88 23       	and	r24, r24
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <LCD_sendCommand+0x50a>
		__ticks = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	98 ab       	std	Y+48, r25	; 0x30
    23ee:	8f a7       	std	Y+47, r24	; 0x2f
    23f0:	3f c0       	rjmp	.+126    	; 0x2470 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    23f2:	69 a9       	ldd	r22, Y+49	; 0x31
    23f4:	7a a9       	ldd	r23, Y+50	; 0x32
    23f6:	8b a9       	ldd	r24, Y+51	; 0x33
    23f8:	9c a9       	ldd	r25, Y+52	; 0x34
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	4c f5       	brge	.+82     	; 0x245c <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	6d a9       	ldd	r22, Y+53	; 0x35
    240c:	7e a9       	ldd	r23, Y+54	; 0x36
    240e:	8f a9       	ldd	r24, Y+55	; 0x37
    2410:	98 ad       	ldd	r25, Y+56	; 0x38
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	98 ab       	std	Y+48, r25	; 0x30
    2430:	8f a7       	std	Y+47, r24	; 0x2f
    2432:	0f c0       	rjmp	.+30     	; 0x2452 <LCD_sendCommand+0x56a>
    2434:	88 ec       	ldi	r24, 0xC8	; 200
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	9e a7       	std	Y+46, r25	; 0x2e
    243a:	8d a7       	std	Y+45, r24	; 0x2d
    243c:	8d a5       	ldd	r24, Y+45	; 0x2d
    243e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_sendCommand+0x558>
    2444:	9e a7       	std	Y+46, r25	; 0x2e
    2446:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2448:	8f a5       	ldd	r24, Y+47	; 0x2f
    244a:	98 a9       	ldd	r25, Y+48	; 0x30
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	98 ab       	std	Y+48, r25	; 0x30
    2450:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2452:	8f a5       	ldd	r24, Y+47	; 0x2f
    2454:	98 a9       	ldd	r25, Y+48	; 0x30
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	69 f7       	brne	.-38     	; 0x2434 <LCD_sendCommand+0x54c>
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245c:	69 a9       	ldd	r22, Y+49	; 0x31
    245e:	7a a9       	ldd	r23, Y+50	; 0x32
    2460:	8b a9       	ldd	r24, Y+51	; 0x33
    2462:	9c a9       	ldd	r25, Y+52	; 0x34
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	98 ab       	std	Y+48, r25	; 0x30
    246e:	8f a7       	std	Y+47, r24	; 0x2f
    2470:	8f a5       	ldd	r24, Y+47	; 0x2f
    2472:	98 a9       	ldd	r25, Y+48	; 0x30
    2474:	9c a7       	std	Y+44, r25	; 0x2c
    2476:	8b a7       	std	Y+43, r24	; 0x2b
    2478:	8b a5       	ldd	r24, Y+43	; 0x2b
    247a:	9c a5       	ldd	r25, Y+44	; 0x2c
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_sendCommand+0x594>
    2480:	9c a7       	std	Y+44, r25	; 0x2c
    2482:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	62 e0       	ldi	r22, 0x02	; 2
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e8       	ldi	r26, 0x80	; 128
    2494:	bf e3       	ldi	r27, 0x3F	; 63
    2496:	8f a3       	std	Y+39, r24	; 0x27
    2498:	98 a7       	std	Y+40, r25	; 0x28
    249a:	a9 a7       	std	Y+41, r26	; 0x29
    249c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	6f a1       	ldd	r22, Y+39	; 0x27
    24a0:	78 a5       	ldd	r23, Y+40	; 0x28
    24a2:	89 a5       	ldd	r24, Y+41	; 0x29
    24a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a ef       	ldi	r20, 0xFA	; 250
    24ac:	54 e4       	ldi	r21, 0x44	; 68
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	8b a3       	std	Y+35, r24	; 0x23
    24b8:	9c a3       	std	Y+36, r25	; 0x24
    24ba:	ad a3       	std	Y+37, r26	; 0x25
    24bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24be:	6b a1       	ldd	r22, Y+35	; 0x23
    24c0:	7c a1       	ldd	r23, Y+36	; 0x24
    24c2:	8d a1       	ldd	r24, Y+37	; 0x25
    24c4:	9e a1       	ldd	r25, Y+38	; 0x26
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9a a3       	std	Y+34, r25	; 0x22
    24dc:	89 a3       	std	Y+33, r24	; 0x21
    24de:	3f c0       	rjmp	.+126    	; 0x255e <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    24e0:	6b a1       	ldd	r22, Y+35	; 0x23
    24e2:	7c a1       	ldd	r23, Y+36	; 0x24
    24e4:	8d a1       	ldd	r24, Y+37	; 0x25
    24e6:	9e a1       	ldd	r25, Y+38	; 0x26
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	57 e4       	ldi	r21, 0x47	; 71
    24f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	4c f5       	brge	.+82     	; 0x254a <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f8:	6f a1       	ldd	r22, Y+39	; 0x27
    24fa:	78 a5       	ldd	r23, Y+40	; 0x28
    24fc:	89 a5       	ldd	r24, Y+41	; 0x29
    24fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e2       	ldi	r20, 0x20	; 32
    2506:	51 e4       	ldi	r21, 0x41	; 65
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9a a3       	std	Y+34, r25	; 0x22
    251e:	89 a3       	std	Y+33, r24	; 0x21
    2520:	0f c0       	rjmp	.+30     	; 0x2540 <LCD_sendCommand+0x658>
    2522:	88 ec       	ldi	r24, 0xC8	; 200
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	98 a3       	std	Y+32, r25	; 0x20
    2528:	8f 8f       	std	Y+31, r24	; 0x1f
    252a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    252c:	98 a1       	ldd	r25, Y+32	; 0x20
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_sendCommand+0x646>
    2532:	98 a3       	std	Y+32, r25	; 0x20
    2534:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2536:	89 a1       	ldd	r24, Y+33	; 0x21
    2538:	9a a1       	ldd	r25, Y+34	; 0x22
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	9a a3       	std	Y+34, r25	; 0x22
    253e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	89 a1       	ldd	r24, Y+33	; 0x21
    2542:	9a a1       	ldd	r25, Y+34	; 0x22
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	69 f7       	brne	.-38     	; 0x2522 <LCD_sendCommand+0x63a>
    2548:	14 c0       	rjmp	.+40     	; 0x2572 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	6b a1       	ldd	r22, Y+35	; 0x23
    254c:	7c a1       	ldd	r23, Y+36	; 0x24
    254e:	8d a1       	ldd	r24, Y+37	; 0x25
    2550:	9e a1       	ldd	r25, Y+38	; 0x26
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9a a3       	std	Y+34, r25	; 0x22
    255c:	89 a3       	std	Y+33, r24	; 0x21
    255e:	89 a1       	ldd	r24, Y+33	; 0x21
    2560:	9a a1       	ldd	r25, Y+34	; 0x22
    2562:	9e 8f       	std	Y+30, r25	; 0x1e
    2564:	8d 8f       	std	Y+29, r24	; 0x1d
    2566:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2568:	9e 8d       	ldd	r25, Y+30	; 0x1e
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_sendCommand+0x682>
    256e:	9e 8f       	std	Y+30, r25	; 0x1e
    2570:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2572:	fe 01       	movw	r30, r28
    2574:	ed 59       	subi	r30, 0x9D	; 157
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	98 2f       	mov	r25, r24
    257c:	91 70       	andi	r25, 0x01	; 1
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	63 e0       	ldi	r22, 0x03	; 3
    2582:	49 2f       	mov	r20, r25
    2584:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2588:	fe 01       	movw	r30, r28
    258a:	ed 59       	subi	r30, 0x9D	; 157
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	88 2f       	mov	r24, r24
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	82 70       	andi	r24, 0x02	; 2
    2596:	90 70       	andi	r25, 0x00	; 0
    2598:	95 95       	asr	r25
    259a:	87 95       	ror	r24
    259c:	98 2f       	mov	r25, r24
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	64 e0       	ldi	r22, 0x04	; 4
    25a2:	49 2f       	mov	r20, r25
    25a4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    25a8:	fe 01       	movw	r30, r28
    25aa:	ed 59       	subi	r30, 0x9D	; 157
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	84 70       	andi	r24, 0x04	; 4
    25b6:	90 70       	andi	r25, 0x00	; 0
    25b8:	95 95       	asr	r25
    25ba:	87 95       	ror	r24
    25bc:	95 95       	asr	r25
    25be:	87 95       	ror	r24
    25c0:	98 2f       	mov	r25, r24
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	65 e0       	ldi	r22, 0x05	; 5
    25c6:	49 2f       	mov	r20, r25
    25c8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    25cc:	fe 01       	movw	r30, r28
    25ce:	ed 59       	subi	r30, 0x9D	; 157
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	88 70       	andi	r24, 0x08	; 8
    25da:	90 70       	andi	r25, 0x00	; 0
    25dc:	95 95       	asr	r25
    25de:	87 95       	ror	r24
    25e0:	95 95       	asr	r25
    25e2:	87 95       	ror	r24
    25e4:	95 95       	asr	r25
    25e6:	87 95       	ror	r24
    25e8:	98 2f       	mov	r25, r24
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	66 e0       	ldi	r22, 0x06	; 6
    25ee:	49 2f       	mov	r20, r25
    25f0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	a0 e8       	ldi	r26, 0x80	; 128
    25fa:	bf e3       	ldi	r27, 0x3F	; 63
    25fc:	89 8f       	std	Y+25, r24	; 0x19
    25fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2600:	ab 8f       	std	Y+27, r26	; 0x1b
    2602:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2604:	69 8d       	ldd	r22, Y+25	; 0x19
    2606:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2608:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4a ef       	ldi	r20, 0xFA	; 250
    2612:	54 e4       	ldi	r21, 0x44	; 68
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	8d 8b       	std	Y+21, r24	; 0x15
    261e:	9e 8b       	std	Y+22, r25	; 0x16
    2620:	af 8b       	std	Y+23, r26	; 0x17
    2622:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2624:	6d 89       	ldd	r22, Y+21	; 0x15
    2626:	7e 89       	ldd	r23, Y+22	; 0x16
    2628:	8f 89       	ldd	r24, Y+23	; 0x17
    262a:	98 8d       	ldd	r25, Y+24	; 0x18
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	5f e3       	ldi	r21, 0x3F	; 63
    2634:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2638:	88 23       	and	r24, r24
    263a:	2c f4       	brge	.+10     	; 0x2646 <LCD_sendCommand+0x75e>
		__ticks = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9c 8b       	std	Y+20, r25	; 0x14
    2642:	8b 8b       	std	Y+19, r24	; 0x13
    2644:	3f c0       	rjmp	.+126    	; 0x26c4 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2646:	6d 89       	ldd	r22, Y+21	; 0x15
    2648:	7e 89       	ldd	r23, Y+22	; 0x16
    264a:	8f 89       	ldd	r24, Y+23	; 0x17
    264c:	98 8d       	ldd	r25, Y+24	; 0x18
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	3f ef       	ldi	r19, 0xFF	; 255
    2652:	4f e7       	ldi	r20, 0x7F	; 127
    2654:	57 e4       	ldi	r21, 0x47	; 71
    2656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265a:	18 16       	cp	r1, r24
    265c:	4c f5       	brge	.+82     	; 0x26b0 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265e:	69 8d       	ldd	r22, Y+25	; 0x19
    2660:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2662:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2664:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e2       	ldi	r20, 0x20	; 32
    266c:	51 e4       	ldi	r21, 0x41	; 65
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9c 8b       	std	Y+20, r25	; 0x14
    2684:	8b 8b       	std	Y+19, r24	; 0x13
    2686:	0f c0       	rjmp	.+30     	; 0x26a6 <LCD_sendCommand+0x7be>
    2688:	88 ec       	ldi	r24, 0xC8	; 200
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9a 8b       	std	Y+18, r25	; 0x12
    268e:	89 8b       	std	Y+17, r24	; 0x11
    2690:	89 89       	ldd	r24, Y+17	; 0x11
    2692:	9a 89       	ldd	r25, Y+18	; 0x12
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_sendCommand+0x7ac>
    2698:	9a 8b       	std	Y+18, r25	; 0x12
    269a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269c:	8b 89       	ldd	r24, Y+19	; 0x13
    269e:	9c 89       	ldd	r25, Y+20	; 0x14
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	9c 8b       	std	Y+20, r25	; 0x14
    26a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a6:	8b 89       	ldd	r24, Y+19	; 0x13
    26a8:	9c 89       	ldd	r25, Y+20	; 0x14
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	69 f7       	brne	.-38     	; 0x2688 <LCD_sendCommand+0x7a0>
    26ae:	14 c0       	rjmp	.+40     	; 0x26d8 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b0:	6d 89       	ldd	r22, Y+21	; 0x15
    26b2:	7e 89       	ldd	r23, Y+22	; 0x16
    26b4:	8f 89       	ldd	r24, Y+23	; 0x17
    26b6:	98 8d       	ldd	r25, Y+24	; 0x18
    26b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	9c 8b       	std	Y+20, r25	; 0x14
    26c2:	8b 8b       	std	Y+19, r24	; 0x13
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	98 8b       	std	Y+16, r25	; 0x10
    26ca:	8f 87       	std	Y+15, r24	; 0x0f
    26cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ce:	98 89       	ldd	r25, Y+16	; 0x10
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <LCD_sendCommand+0x7e8>
    26d4:	98 8b       	std	Y+16, r25	; 0x10
    26d6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	62 e0       	ldi	r22, 0x02	; 2
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a0 e8       	ldi	r26, 0x80	; 128
    26e8:	bf e3       	ldi	r27, 0x3F	; 63
    26ea:	8b 87       	std	Y+11, r24	; 0x0b
    26ec:	9c 87       	std	Y+12, r25	; 0x0c
    26ee:	ad 87       	std	Y+13, r26	; 0x0d
    26f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a ef       	ldi	r20, 0xFA	; 250
    2700:	54 e4       	ldi	r21, 0x44	; 68
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8f 83       	std	Y+7, r24	; 0x07
    270c:	98 87       	std	Y+8, r25	; 0x08
    270e:	a9 87       	std	Y+9, r26	; 0x09
    2710:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2712:	6f 81       	ldd	r22, Y+7	; 0x07
    2714:	78 85       	ldd	r23, Y+8	; 0x08
    2716:	89 85       	ldd	r24, Y+9	; 0x09
    2718:	9a 85       	ldd	r25, Y+10	; 0x0a
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <LCD_sendCommand+0x84c>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9e 83       	std	Y+6, r25	; 0x06
    2730:	8d 83       	std	Y+5, r24	; 0x05
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2734:	6f 81       	ldd	r22, Y+7	; 0x07
    2736:	78 85       	ldd	r23, Y+8	; 0x08
    2738:	89 85       	ldd	r24, Y+9	; 0x09
    273a:	9a 85       	ldd	r25, Y+10	; 0x0a
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	6b 85       	ldd	r22, Y+11	; 0x0b
    274e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2750:	8d 85       	ldd	r24, Y+13	; 0x0d
    2752:	9e 85       	ldd	r25, Y+14	; 0x0e
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9e 83       	std	Y+6, r25	; 0x06
    2772:	8d 83       	std	Y+5, r24	; 0x05
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <LCD_sendCommand+0x8ac>
    2776:	88 ec       	ldi	r24, 0xC8	; 200
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <LCD_sendCommand+0x89a>
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <LCD_sendCommand+0x88e>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <LCD_sendCommand+0x8d6>
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27c6:	cd 59       	subi	r28, 0x9D	; 157
    27c8:	df 4f       	sbci	r29, 0xFF	; 255
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	08 95       	ret

000027de <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	c3 56       	subi	r28, 0x63	; 99
    27ec:	d0 40       	sbci	r29, 0x00	; 0
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	fe 01       	movw	r30, r28
    27fa:	ed 59       	subi	r30, 0x9D	; 157
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	61 e0       	ldi	r22, 0x01	; 1
    2804:	41 e0       	ldi	r20, 0x01	; 1
    2806:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    280a:	fe 01       	movw	r30, r28
    280c:	e1 5a       	subi	r30, 0xA1	; 161
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 e8       	ldi	r26, 0x80	; 128
    2816:	bf e3       	ldi	r27, 0x3F	; 63
    2818:	80 83       	st	Z, r24
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	a2 83       	std	Z+2, r26	; 0x02
    281e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2820:	8e 01       	movw	r16, r28
    2822:	05 5a       	subi	r16, 0xA5	; 165
    2824:	1f 4f       	sbci	r17, 0xFF	; 255
    2826:	fe 01       	movw	r30, r28
    2828:	e1 5a       	subi	r30, 0xA1	; 161
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	f8 01       	movw	r30, r16
    2846:	80 83       	st	Z, r24
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	a2 83       	std	Z+2, r26	; 0x02
    284c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    284e:	fe 01       	movw	r30, r28
    2850:	e5 5a       	subi	r30, 0xA5	; 165
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e8       	ldi	r20, 0x80	; 128
    2862:	5f e3       	ldi	r21, 0x3F	; 63
    2864:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2868:	88 23       	and	r24, r24
    286a:	44 f4       	brge	.+16     	; 0x287c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    286c:	fe 01       	movw	r30, r28
    286e:	e7 5a       	subi	r30, 0xA7	; 167
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	80 83       	st	Z, r24
    287a:	64 c0       	rjmp	.+200    	; 0x2944 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    287c:	fe 01       	movw	r30, r28
    287e:	e5 5a       	subi	r30, 0xA5	; 165
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	3f ef       	ldi	r19, 0xFF	; 255
    288e:	4f e7       	ldi	r20, 0x7F	; 127
    2890:	57 e4       	ldi	r21, 0x47	; 71
    2892:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2896:	18 16       	cp	r1, r24
    2898:	0c f0       	brlt	.+2      	; 0x289c <LCD_displayCharacter+0xbe>
    289a:	43 c0       	rjmp	.+134    	; 0x2922 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289c:	fe 01       	movw	r30, r28
    289e:	e1 5a       	subi	r30, 0xA1	; 161
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e2       	ldi	r20, 0x20	; 32
    28b0:	51 e4       	ldi	r21, 0x41	; 65
    28b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	8e 01       	movw	r16, r28
    28bc:	07 5a       	subi	r16, 0xA7	; 167
    28be:	1f 4f       	sbci	r17, 0xFF	; 255
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	f8 01       	movw	r30, r16
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	80 83       	st	Z, r24
    28d2:	1f c0       	rjmp	.+62     	; 0x2912 <LCD_displayCharacter+0x134>
    28d4:	fe 01       	movw	r30, r28
    28d6:	e9 5a       	subi	r30, 0xA9	; 169
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	88 ec       	ldi	r24, 0xC8	; 200
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	fe 01       	movw	r30, r28
    28e4:	e9 5a       	subi	r30, 0xA9	; 169
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <LCD_displayCharacter+0x10e>
    28f0:	fe 01       	movw	r30, r28
    28f2:	e9 5a       	subi	r30, 0xA9	; 169
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	de 01       	movw	r26, r28
    28fc:	a7 5a       	subi	r26, 0xA7	; 167
    28fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2900:	fe 01       	movw	r30, r28
    2902:	e7 5a       	subi	r30, 0xA7	; 167
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	80 81       	ld	r24, Z
    2908:	91 81       	ldd	r25, Z+1	; 0x01
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	11 96       	adiw	r26, 0x01	; 1
    290e:	9c 93       	st	X, r25
    2910:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2912:	fe 01       	movw	r30, r28
    2914:	e7 5a       	subi	r30, 0xA7	; 167
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	d1 f6       	brne	.-76     	; 0x28d4 <LCD_displayCharacter+0xf6>
    2920:	27 c0       	rjmp	.+78     	; 0x2970 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2922:	8e 01       	movw	r16, r28
    2924:	07 5a       	subi	r16, 0xA7	; 167
    2926:	1f 4f       	sbci	r17, 0xFF	; 255
    2928:	fe 01       	movw	r30, r28
    292a:	e5 5a       	subi	r30, 0xA5	; 165
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	60 81       	ld	r22, Z
    2930:	71 81       	ldd	r23, Z+1	; 0x01
    2932:	82 81       	ldd	r24, Z+2	; 0x02
    2934:	93 81       	ldd	r25, Z+3	; 0x03
    2936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	f8 01       	movw	r30, r16
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	80 83       	st	Z, r24
    2944:	de 01       	movw	r26, r28
    2946:	ab 5a       	subi	r26, 0xAB	; 171
    2948:	bf 4f       	sbci	r27, 0xFF	; 255
    294a:	fe 01       	movw	r30, r28
    294c:	e7 5a       	subi	r30, 0xA7	; 167
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	8d 93       	st	X+, r24
    2956:	9c 93       	st	X, r25
    2958:	fe 01       	movw	r30, r28
    295a:	eb 5a       	subi	r30, 0xAB	; 171
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	80 81       	ld	r24, Z
    2960:	91 81       	ldd	r25, Z+1	; 0x01
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <LCD_displayCharacter+0x184>
    2966:	fe 01       	movw	r30, r28
    2968:	eb 5a       	subi	r30, 0xAB	; 171
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	62 e0       	ldi	r22, 0x02	; 2
    2974:	41 e0       	ldi	r20, 0x01	; 1
    2976:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    297a:	fe 01       	movw	r30, r28
    297c:	ef 5a       	subi	r30, 0xAF	; 175
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	a0 e8       	ldi	r26, 0x80	; 128
    2986:	bf e3       	ldi	r27, 0x3F	; 63
    2988:	80 83       	st	Z, r24
    298a:	91 83       	std	Z+1, r25	; 0x01
    298c:	a2 83       	std	Z+2, r26	; 0x02
    298e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2990:	8e 01       	movw	r16, r28
    2992:	03 5b       	subi	r16, 0xB3	; 179
    2994:	1f 4f       	sbci	r17, 0xFF	; 255
    2996:	fe 01       	movw	r30, r28
    2998:	ef 5a       	subi	r30, 0xAF	; 175
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4a ef       	ldi	r20, 0xFA	; 250
    29aa:	54 e4       	ldi	r21, 0x44	; 68
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	f8 01       	movw	r30, r16
    29b6:	80 83       	st	Z, r24
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	a2 83       	std	Z+2, r26	; 0x02
    29bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29be:	fe 01       	movw	r30, r28
    29c0:	e3 5b       	subi	r30, 0xB3	; 179
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	60 81       	ld	r22, Z
    29c6:	71 81       	ldd	r23, Z+1	; 0x01
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	93 81       	ldd	r25, Z+3	; 0x03
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	44 f4       	brge	.+16     	; 0x29ec <LCD_displayCharacter+0x20e>
		__ticks = 1;
    29dc:	fe 01       	movw	r30, r28
    29de:	e5 5b       	subi	r30, 0xB5	; 181
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
    29ea:	64 c0       	rjmp	.+200    	; 0x2ab4 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    29ec:	fe 01       	movw	r30, r28
    29ee:	e3 5b       	subi	r30, 0xB3	; 179
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	3f ef       	ldi	r19, 0xFF	; 255
    29fe:	4f e7       	ldi	r20, 0x7F	; 127
    2a00:	57 e4       	ldi	r21, 0x47	; 71
    2a02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a06:	18 16       	cp	r1, r24
    2a08:	0c f0       	brlt	.+2      	; 0x2a0c <LCD_displayCharacter+0x22e>
    2a0a:	43 c0       	rjmp	.+134    	; 0x2a92 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ef 5a       	subi	r30, 0xAF	; 175
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	60 81       	ld	r22, Z
    2a14:	71 81       	ldd	r23, Z+1	; 0x01
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e2       	ldi	r20, 0x20	; 32
    2a20:	51 e4       	ldi	r21, 0x41	; 65
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	8e 01       	movw	r16, r28
    2a2c:	05 5b       	subi	r16, 0xB5	; 181
    2a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	f8 01       	movw	r30, r16
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	80 83       	st	Z, r24
    2a42:	1f c0       	rjmp	.+62     	; 0x2a82 <LCD_displayCharacter+0x2a4>
    2a44:	fe 01       	movw	r30, r28
    2a46:	e7 5b       	subi	r30, 0xB7	; 183
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	88 ec       	ldi	r24, 0xC8	; 200
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
    2a52:	fe 01       	movw	r30, r28
    2a54:	e7 5b       	subi	r30, 0xB7	; 183
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <LCD_displayCharacter+0x27e>
    2a60:	fe 01       	movw	r30, r28
    2a62:	e7 5b       	subi	r30, 0xB7	; 183
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6a:	de 01       	movw	r26, r28
    2a6c:	a5 5b       	subi	r26, 0xB5	; 181
    2a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a70:	fe 01       	movw	r30, r28
    2a72:	e5 5b       	subi	r30, 0xB5	; 181
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	11 96       	adiw	r26, 0x01	; 1
    2a7e:	9c 93       	st	X, r25
    2a80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a82:	fe 01       	movw	r30, r28
    2a84:	e5 5b       	subi	r30, 0xB5	; 181
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	d1 f6       	brne	.-76     	; 0x2a44 <LCD_displayCharacter+0x266>
    2a90:	27 c0       	rjmp	.+78     	; 0x2ae0 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a92:	8e 01       	movw	r16, r28
    2a94:	05 5b       	subi	r16, 0xB5	; 181
    2a96:	1f 4f       	sbci	r17, 0xFF	; 255
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e3 5b       	subi	r30, 0xB3	; 179
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	60 81       	ld	r22, Z
    2aa0:	71 81       	ldd	r23, Z+1	; 0x01
    2aa2:	82 81       	ldd	r24, Z+2	; 0x02
    2aa4:	93 81       	ldd	r25, Z+3	; 0x03
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	f8 01       	movw	r30, r16
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	80 83       	st	Z, r24
    2ab4:	de 01       	movw	r26, r28
    2ab6:	a9 5b       	subi	r26, 0xB9	; 185
    2ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aba:	fe 01       	movw	r30, r28
    2abc:	e5 5b       	subi	r30, 0xB5	; 181
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	8d 93       	st	X+, r24
    2ac6:	9c 93       	st	X, r25
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e9 5b       	subi	r30, 0xB9	; 185
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	80 81       	ld	r24, Z
    2ad0:	91 81       	ldd	r25, Z+1	; 0x01
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <LCD_displayCharacter+0x2f4>
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e9 5b       	subi	r30, 0xB9	; 185
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	ed 59       	subi	r30, 0x9D	; 157
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	88 2f       	mov	r24, r24
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	80 71       	andi	r24, 0x10	; 16
    2aee:	90 70       	andi	r25, 0x00	; 0
    2af0:	95 95       	asr	r25
    2af2:	87 95       	ror	r24
    2af4:	95 95       	asr	r25
    2af6:	87 95       	ror	r24
    2af8:	95 95       	asr	r25
    2afa:	87 95       	ror	r24
    2afc:	95 95       	asr	r25
    2afe:	87 95       	ror	r24
    2b00:	98 2f       	mov	r25, r24
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	63 e0       	ldi	r22, 0x03	; 3
    2b06:	49 2f       	mov	r20, r25
    2b08:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ed 59       	subi	r30, 0x9D	; 157
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	80 72       	andi	r24, 0x20	; 32
    2b1a:	90 70       	andi	r25, 0x00	; 0
    2b1c:	95 95       	asr	r25
    2b1e:	87 95       	ror	r24
    2b20:	95 95       	asr	r25
    2b22:	87 95       	ror	r24
    2b24:	95 95       	asr	r25
    2b26:	87 95       	ror	r24
    2b28:	95 95       	asr	r25
    2b2a:	87 95       	ror	r24
    2b2c:	95 95       	asr	r25
    2b2e:	87 95       	ror	r24
    2b30:	98 2f       	mov	r25, r24
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	64 e0       	ldi	r22, 0x04	; 4
    2b36:	49 2f       	mov	r20, r25
    2b38:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ed 59       	subi	r30, 0x9D	; 157
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	80 74       	andi	r24, 0x40	; 64
    2b4a:	90 70       	andi	r25, 0x00	; 0
    2b4c:	08 2e       	mov	r0, r24
    2b4e:	89 2f       	mov	r24, r25
    2b50:	00 0c       	add	r0, r0
    2b52:	88 1f       	adc	r24, r24
    2b54:	99 0b       	sbc	r25, r25
    2b56:	00 0c       	add	r0, r0
    2b58:	88 1f       	adc	r24, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	98 2f       	mov	r25, r24
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	65 e0       	ldi	r22, 0x05	; 5
    2b62:	49 2f       	mov	r20, r25
    2b64:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2b68:	fe 01       	movw	r30, r28
    2b6a:	ed 59       	subi	r30, 0x9D	; 157
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 81       	ld	r24, Z
    2b70:	98 2f       	mov	r25, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	99 27       	eor	r25, r25
    2b76:	99 1f       	adc	r25, r25
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	66 e0       	ldi	r22, 0x06	; 6
    2b7c:	49 2f       	mov	r20, r25
    2b7e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    2b82:	fe 01       	movw	r30, r28
    2b84:	ed 5b       	subi	r30, 0xBD	; 189
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	a0 e8       	ldi	r26, 0x80	; 128
    2b8e:	bf e3       	ldi	r27, 0x3F	; 63
    2b90:	80 83       	st	Z, r24
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	a2 83       	std	Z+2, r26	; 0x02
    2b96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b98:	8e 01       	movw	r16, r28
    2b9a:	01 5c       	subi	r16, 0xC1	; 193
    2b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	ed 5b       	subi	r30, 0xBD	; 189
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	60 81       	ld	r22, Z
    2ba6:	71 81       	ldd	r23, Z+1	; 0x01
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	4a ef       	ldi	r20, 0xFA	; 250
    2bb2:	54 e4       	ldi	r21, 0x44	; 68
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	f8 01       	movw	r30, r16
    2bbe:	80 83       	st	Z, r24
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	a2 83       	std	Z+2, r26	; 0x02
    2bc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	ff 96       	adiw	r30, 0x3f	; 63
    2bca:	60 81       	ld	r22, Z
    2bcc:	71 81       	ldd	r23, Z+1	; 0x01
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e8       	ldi	r20, 0x80	; 128
    2bd8:	5f e3       	ldi	r21, 0x3F	; 63
    2bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bde:	88 23       	and	r24, r24
    2be0:	2c f4       	brge	.+10     	; 0x2bec <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	9e af       	std	Y+62, r25	; 0x3e
    2be8:	8d af       	std	Y+61, r24	; 0x3d
    2bea:	46 c0       	rjmp	.+140    	; 0x2c78 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2bec:	fe 01       	movw	r30, r28
    2bee:	ff 96       	adiw	r30, 0x3f	; 63
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	3f ef       	ldi	r19, 0xFF	; 255
    2bfc:	4f e7       	ldi	r20, 0x7F	; 127
    2bfe:	57 e4       	ldi	r21, 0x47	; 71
    2c00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c04:	18 16       	cp	r1, r24
    2c06:	64 f5       	brge	.+88     	; 0x2c60 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c08:	fe 01       	movw	r30, r28
    2c0a:	ed 5b       	subi	r30, 0xBD	; 189
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	60 81       	ld	r22, Z
    2c10:	71 81       	ldd	r23, Z+1	; 0x01
    2c12:	82 81       	ldd	r24, Z+2	; 0x02
    2c14:	93 81       	ldd	r25, Z+3	; 0x03
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e2       	ldi	r20, 0x20	; 32
    2c1c:	51 e4       	ldi	r21, 0x41	; 65
    2c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	bc 01       	movw	r22, r24
    2c28:	cd 01       	movw	r24, r26
    2c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9e af       	std	Y+62, r25	; 0x3e
    2c34:	8d af       	std	Y+61, r24	; 0x3d
    2c36:	0f c0       	rjmp	.+30     	; 0x2c56 <LCD_displayCharacter+0x478>
    2c38:	88 ec       	ldi	r24, 0xC8	; 200
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9c af       	std	Y+60, r25	; 0x3c
    2c3e:	8b af       	std	Y+59, r24	; 0x3b
    2c40:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c42:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <LCD_displayCharacter+0x466>
    2c48:	9c af       	std	Y+60, r25	; 0x3c
    2c4a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	9e af       	std	Y+62, r25	; 0x3e
    2c54:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c56:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c58:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	69 f7       	brne	.-38     	; 0x2c38 <LCD_displayCharacter+0x45a>
    2c5e:	16 c0       	rjmp	.+44     	; 0x2c8c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c60:	fe 01       	movw	r30, r28
    2c62:	ff 96       	adiw	r30, 0x3f	; 63
    2c64:	60 81       	ld	r22, Z
    2c66:	71 81       	ldd	r23, Z+1	; 0x01
    2c68:	82 81       	ldd	r24, Z+2	; 0x02
    2c6a:	93 81       	ldd	r25, Z+3	; 0x03
    2c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	9e af       	std	Y+62, r25	; 0x3e
    2c76:	8d af       	std	Y+61, r24	; 0x3d
    2c78:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c7c:	9a af       	std	Y+58, r25	; 0x3a
    2c7e:	89 af       	std	Y+57, r24	; 0x39
    2c80:	89 ad       	ldd	r24, Y+57	; 0x39
    2c82:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <LCD_displayCharacter+0x4a6>
    2c88:	9a af       	std	Y+58, r25	; 0x3a
    2c8a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	62 e0       	ldi	r22, 0x02	; 2
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	a0 e8       	ldi	r26, 0x80	; 128
    2c9c:	bf e3       	ldi	r27, 0x3F	; 63
    2c9e:	8d ab       	std	Y+53, r24	; 0x35
    2ca0:	9e ab       	std	Y+54, r25	; 0x36
    2ca2:	af ab       	std	Y+55, r26	; 0x37
    2ca4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ca8:	7e a9       	ldd	r23, Y+54	; 0x36
    2caa:	8f a9       	ldd	r24, Y+55	; 0x37
    2cac:	98 ad       	ldd	r25, Y+56	; 0x38
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	4a ef       	ldi	r20, 0xFA	; 250
    2cb4:	54 e4       	ldi	r21, 0x44	; 68
    2cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	89 ab       	std	Y+49, r24	; 0x31
    2cc0:	9a ab       	std	Y+50, r25	; 0x32
    2cc2:	ab ab       	std	Y+51, r26	; 0x33
    2cc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cc6:	69 a9       	ldd	r22, Y+49	; 0x31
    2cc8:	7a a9       	ldd	r23, Y+50	; 0x32
    2cca:	8b a9       	ldd	r24, Y+51	; 0x33
    2ccc:	9c a9       	ldd	r25, Y+52	; 0x34
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e8       	ldi	r20, 0x80	; 128
    2cd4:	5f e3       	ldi	r21, 0x3F	; 63
    2cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cda:	88 23       	and	r24, r24
    2cdc:	2c f4       	brge	.+10     	; 0x2ce8 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	98 ab       	std	Y+48, r25	; 0x30
    2ce4:	8f a7       	std	Y+47, r24	; 0x2f
    2ce6:	3f c0       	rjmp	.+126    	; 0x2d66 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2ce8:	69 a9       	ldd	r22, Y+49	; 0x31
    2cea:	7a a9       	ldd	r23, Y+50	; 0x32
    2cec:	8b a9       	ldd	r24, Y+51	; 0x33
    2cee:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	3f ef       	ldi	r19, 0xFF	; 255
    2cf4:	4f e7       	ldi	r20, 0x7F	; 127
    2cf6:	57 e4       	ldi	r21, 0x47	; 71
    2cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cfc:	18 16       	cp	r1, r24
    2cfe:	4c f5       	brge	.+82     	; 0x2d52 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d00:	6d a9       	ldd	r22, Y+53	; 0x35
    2d02:	7e a9       	ldd	r23, Y+54	; 0x36
    2d04:	8f a9       	ldd	r24, Y+55	; 0x37
    2d06:	98 ad       	ldd	r25, Y+56	; 0x38
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e2       	ldi	r20, 0x20	; 32
    2d0e:	51 e4       	ldi	r21, 0x41	; 65
    2d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	98 ab       	std	Y+48, r25	; 0x30
    2d26:	8f a7       	std	Y+47, r24	; 0x2f
    2d28:	0f c0       	rjmp	.+30     	; 0x2d48 <LCD_displayCharacter+0x56a>
    2d2a:	88 ec       	ldi	r24, 0xC8	; 200
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	9e a7       	std	Y+46, r25	; 0x2e
    2d30:	8d a7       	std	Y+45, r24	; 0x2d
    2d32:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d34:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <LCD_displayCharacter+0x558>
    2d3a:	9e a7       	std	Y+46, r25	; 0x2e
    2d3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d40:	98 a9       	ldd	r25, Y+48	; 0x30
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	98 ab       	std	Y+48, r25	; 0x30
    2d46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	69 f7       	brne	.-38     	; 0x2d2a <LCD_displayCharacter+0x54c>
    2d50:	14 c0       	rjmp	.+40     	; 0x2d7a <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d52:	69 a9       	ldd	r22, Y+49	; 0x31
    2d54:	7a a9       	ldd	r23, Y+50	; 0x32
    2d56:	8b a9       	ldd	r24, Y+51	; 0x33
    2d58:	9c a9       	ldd	r25, Y+52	; 0x34
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	98 ab       	std	Y+48, r25	; 0x30
    2d64:	8f a7       	std	Y+47, r24	; 0x2f
    2d66:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d68:	98 a9       	ldd	r25, Y+48	; 0x30
    2d6a:	9c a7       	std	Y+44, r25	; 0x2c
    2d6c:	8b a7       	std	Y+43, r24	; 0x2b
    2d6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d70:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <LCD_displayCharacter+0x594>
    2d76:	9c a7       	std	Y+44, r25	; 0x2c
    2d78:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	62 e0       	ldi	r22, 0x02	; 2
    2d7e:	41 e0       	ldi	r20, 0x01	; 1
    2d80:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	a0 e8       	ldi	r26, 0x80	; 128
    2d8a:	bf e3       	ldi	r27, 0x3F	; 63
    2d8c:	8f a3       	std	Y+39, r24	; 0x27
    2d8e:	98 a7       	std	Y+40, r25	; 0x28
    2d90:	a9 a7       	std	Y+41, r26	; 0x29
    2d92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d94:	6f a1       	ldd	r22, Y+39	; 0x27
    2d96:	78 a5       	ldd	r23, Y+40	; 0x28
    2d98:	89 a5       	ldd	r24, Y+41	; 0x29
    2d9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	4a ef       	ldi	r20, 0xFA	; 250
    2da2:	54 e4       	ldi	r21, 0x44	; 68
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8b a3       	std	Y+35, r24	; 0x23
    2dae:	9c a3       	std	Y+36, r25	; 0x24
    2db0:	ad a3       	std	Y+37, r26	; 0x25
    2db2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2db4:	6b a1       	ldd	r22, Y+35	; 0x23
    2db6:	7c a1       	ldd	r23, Y+36	; 0x24
    2db8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dba:	9e a1       	ldd	r25, Y+38	; 0x26
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	2c f4       	brge	.+10     	; 0x2dd6 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	9a a3       	std	Y+34, r25	; 0x22
    2dd2:	89 a3       	std	Y+33, r24	; 0x21
    2dd4:	3f c0       	rjmp	.+126    	; 0x2e54 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2dd6:	6b a1       	ldd	r22, Y+35	; 0x23
    2dd8:	7c a1       	ldd	r23, Y+36	; 0x24
    2dda:	8d a1       	ldd	r24, Y+37	; 0x25
    2ddc:	9e a1       	ldd	r25, Y+38	; 0x26
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	3f ef       	ldi	r19, 0xFF	; 255
    2de2:	4f e7       	ldi	r20, 0x7F	; 127
    2de4:	57 e4       	ldi	r21, 0x47	; 71
    2de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dea:	18 16       	cp	r1, r24
    2dec:	4c f5       	brge	.+82     	; 0x2e40 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dee:	6f a1       	ldd	r22, Y+39	; 0x27
    2df0:	78 a5       	ldd	r23, Y+40	; 0x28
    2df2:	89 a5       	ldd	r24, Y+41	; 0x29
    2df4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e2       	ldi	r20, 0x20	; 32
    2dfc:	51 e4       	ldi	r21, 0x41	; 65
    2dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	bc 01       	movw	r22, r24
    2e08:	cd 01       	movw	r24, r26
    2e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	9a a3       	std	Y+34, r25	; 0x22
    2e14:	89 a3       	std	Y+33, r24	; 0x21
    2e16:	0f c0       	rjmp	.+30     	; 0x2e36 <LCD_displayCharacter+0x658>
    2e18:	88 ec       	ldi	r24, 0xC8	; 200
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	98 a3       	std	Y+32, r25	; 0x20
    2e1e:	8f 8f       	std	Y+31, r24	; 0x1f
    2e20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e22:	98 a1       	ldd	r25, Y+32	; 0x20
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <LCD_displayCharacter+0x646>
    2e28:	98 a3       	std	Y+32, r25	; 0x20
    2e2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	9a a3       	std	Y+34, r25	; 0x22
    2e34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e36:	89 a1       	ldd	r24, Y+33	; 0x21
    2e38:	9a a1       	ldd	r25, Y+34	; 0x22
    2e3a:	00 97       	sbiw	r24, 0x00	; 0
    2e3c:	69 f7       	brne	.-38     	; 0x2e18 <LCD_displayCharacter+0x63a>
    2e3e:	14 c0       	rjmp	.+40     	; 0x2e68 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e40:	6b a1       	ldd	r22, Y+35	; 0x23
    2e42:	7c a1       	ldd	r23, Y+36	; 0x24
    2e44:	8d a1       	ldd	r24, Y+37	; 0x25
    2e46:	9e a1       	ldd	r25, Y+38	; 0x26
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	9a a3       	std	Y+34, r25	; 0x22
    2e52:	89 a3       	std	Y+33, r24	; 0x21
    2e54:	89 a1       	ldd	r24, Y+33	; 0x21
    2e56:	9a a1       	ldd	r25, Y+34	; 0x22
    2e58:	9e 8f       	std	Y+30, r25	; 0x1e
    2e5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2e5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <LCD_displayCharacter+0x682>
    2e64:	9e 8f       	std	Y+30, r25	; 0x1e
    2e66:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ed 59       	subi	r30, 0x9D	; 157
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	80 81       	ld	r24, Z
    2e70:	98 2f       	mov	r25, r24
    2e72:	91 70       	andi	r25, 0x01	; 1
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	63 e0       	ldi	r22, 0x03	; 3
    2e78:	49 2f       	mov	r20, r25
    2e7a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2e7e:	fe 01       	movw	r30, r28
    2e80:	ed 59       	subi	r30, 0x9D	; 157
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	80 81       	ld	r24, Z
    2e86:	88 2f       	mov	r24, r24
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	82 70       	andi	r24, 0x02	; 2
    2e8c:	90 70       	andi	r25, 0x00	; 0
    2e8e:	95 95       	asr	r25
    2e90:	87 95       	ror	r24
    2e92:	98 2f       	mov	r25, r24
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	64 e0       	ldi	r22, 0x04	; 4
    2e98:	49 2f       	mov	r20, r25
    2e9a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	ed 59       	subi	r30, 0x9D	; 157
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	80 81       	ld	r24, Z
    2ea6:	88 2f       	mov	r24, r24
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	84 70       	andi	r24, 0x04	; 4
    2eac:	90 70       	andi	r25, 0x00	; 0
    2eae:	95 95       	asr	r25
    2eb0:	87 95       	ror	r24
    2eb2:	95 95       	asr	r25
    2eb4:	87 95       	ror	r24
    2eb6:	98 2f       	mov	r25, r24
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	65 e0       	ldi	r22, 0x05	; 5
    2ebc:	49 2f       	mov	r20, r25
    2ebe:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ed 59       	subi	r30, 0x9D	; 157
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	88 2f       	mov	r24, r24
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	88 70       	andi	r24, 0x08	; 8
    2ed0:	90 70       	andi	r25, 0x00	; 0
    2ed2:	95 95       	asr	r25
    2ed4:	87 95       	ror	r24
    2ed6:	95 95       	asr	r25
    2ed8:	87 95       	ror	r24
    2eda:	95 95       	asr	r25
    2edc:	87 95       	ror	r24
    2ede:	98 2f       	mov	r25, r24
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	66 e0       	ldi	r22, 0x06	; 6
    2ee4:	49 2f       	mov	r20, r25
    2ee6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	a0 e8       	ldi	r26, 0x80	; 128
    2ef0:	bf e3       	ldi	r27, 0x3F	; 63
    2ef2:	89 8f       	std	Y+25, r24	; 0x19
    2ef4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ef6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ef8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efa:	69 8d       	ldd	r22, Y+25	; 0x19
    2efc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2efe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	4a ef       	ldi	r20, 0xFA	; 250
    2f08:	54 e4       	ldi	r21, 0x44	; 68
    2f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	8d 8b       	std	Y+21, r24	; 0x15
    2f14:	9e 8b       	std	Y+22, r25	; 0x16
    2f16:	af 8b       	std	Y+23, r26	; 0x17
    2f18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f20:	98 8d       	ldd	r25, Y+24	; 0x18
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e8       	ldi	r20, 0x80	; 128
    2f28:	5f e3       	ldi	r21, 0x3F	; 63
    2f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2e:	88 23       	and	r24, r24
    2f30:	2c f4       	brge	.+10     	; 0x2f3c <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	9c 8b       	std	Y+20, r25	; 0x14
    2f38:	8b 8b       	std	Y+19, r24	; 0x13
    2f3a:	3f c0       	rjmp	.+126    	; 0x2fba <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2f3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f40:	8f 89       	ldd	r24, Y+23	; 0x17
    2f42:	98 8d       	ldd	r25, Y+24	; 0x18
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	3f ef       	ldi	r19, 0xFF	; 255
    2f48:	4f e7       	ldi	r20, 0x7F	; 127
    2f4a:	57 e4       	ldi	r21, 0x47	; 71
    2f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f50:	18 16       	cp	r1, r24
    2f52:	4c f5       	brge	.+82     	; 0x2fa6 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f54:	69 8d       	ldd	r22, Y+25	; 0x19
    2f56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e2       	ldi	r20, 0x20	; 32
    2f62:	51 e4       	ldi	r21, 0x41	; 65
    2f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	9c 8b       	std	Y+20, r25	; 0x14
    2f7a:	8b 8b       	std	Y+19, r24	; 0x13
    2f7c:	0f c0       	rjmp	.+30     	; 0x2f9c <LCD_displayCharacter+0x7be>
    2f7e:	88 ec       	ldi	r24, 0xC8	; 200
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	9a 8b       	std	Y+18, r25	; 0x12
    2f84:	89 8b       	std	Y+17, r24	; 0x11
    2f86:	89 89       	ldd	r24, Y+17	; 0x11
    2f88:	9a 89       	ldd	r25, Y+18	; 0x12
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	f1 f7       	brne	.-4      	; 0x2f8a <LCD_displayCharacter+0x7ac>
    2f8e:	9a 8b       	std	Y+18, r25	; 0x12
    2f90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f92:	8b 89       	ldd	r24, Y+19	; 0x13
    2f94:	9c 89       	ldd	r25, Y+20	; 0x14
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	9c 8b       	std	Y+20, r25	; 0x14
    2f9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	69 f7       	brne	.-38     	; 0x2f7e <LCD_displayCharacter+0x7a0>
    2fa4:	14 c0       	rjmp	.+40     	; 0x2fce <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    2faa:	8f 89       	ldd	r24, Y+23	; 0x17
    2fac:	98 8d       	ldd	r25, Y+24	; 0x18
    2fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	9c 8b       	std	Y+20, r25	; 0x14
    2fb8:	8b 8b       	std	Y+19, r24	; 0x13
    2fba:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fbe:	98 8b       	std	Y+16, r25	; 0x10
    2fc0:	8f 87       	std	Y+15, r24	; 0x0f
    2fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc4:	98 89       	ldd	r25, Y+16	; 0x10
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	f1 f7       	brne	.-4      	; 0x2fc6 <LCD_displayCharacter+0x7e8>
    2fca:	98 8b       	std	Y+16, r25	; 0x10
    2fcc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	62 e0       	ldi	r22, 0x02	; 2
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <GPIO_writePin>
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	a0 e8       	ldi	r26, 0x80	; 128
    2fde:	bf e3       	ldi	r27, 0x3F	; 63
    2fe0:	8b 87       	std	Y+11, r24	; 0x0b
    2fe2:	9c 87       	std	Y+12, r25	; 0x0c
    2fe4:	ad 87       	std	Y+13, r26	; 0x0d
    2fe6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	4a ef       	ldi	r20, 0xFA	; 250
    2ff6:	54 e4       	ldi	r21, 0x44	; 68
    2ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	8f 83       	std	Y+7, r24	; 0x07
    3002:	98 87       	std	Y+8, r25	; 0x08
    3004:	a9 87       	std	Y+9, r26	; 0x09
    3006:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3008:	6f 81       	ldd	r22, Y+7	; 0x07
    300a:	78 85       	ldd	r23, Y+8	; 0x08
    300c:	89 85       	ldd	r24, Y+9	; 0x09
    300e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e8       	ldi	r20, 0x80	; 128
    3016:	5f e3       	ldi	r21, 0x3F	; 63
    3018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    301c:	88 23       	and	r24, r24
    301e:	2c f4       	brge	.+10     	; 0x302a <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	9e 83       	std	Y+6, r25	; 0x06
    3026:	8d 83       	std	Y+5, r24	; 0x05
    3028:	3f c0       	rjmp	.+126    	; 0x30a8 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    302a:	6f 81       	ldd	r22, Y+7	; 0x07
    302c:	78 85       	ldd	r23, Y+8	; 0x08
    302e:	89 85       	ldd	r24, Y+9	; 0x09
    3030:	9a 85       	ldd	r25, Y+10	; 0x0a
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	3f ef       	ldi	r19, 0xFF	; 255
    3036:	4f e7       	ldi	r20, 0x7F	; 127
    3038:	57 e4       	ldi	r21, 0x47	; 71
    303a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    303e:	18 16       	cp	r1, r24
    3040:	4c f5       	brge	.+82     	; 0x3094 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3042:	6b 85       	ldd	r22, Y+11	; 0x0b
    3044:	7c 85       	ldd	r23, Y+12	; 0x0c
    3046:	8d 85       	ldd	r24, Y+13	; 0x0d
    3048:	9e 85       	ldd	r25, Y+14	; 0x0e
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e2       	ldi	r20, 0x20	; 32
    3050:	51 e4       	ldi	r21, 0x41	; 65
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9e 83       	std	Y+6, r25	; 0x06
    3068:	8d 83       	std	Y+5, r24	; 0x05
    306a:	0f c0       	rjmp	.+30     	; 0x308a <LCD_displayCharacter+0x8ac>
    306c:	88 ec       	ldi	r24, 0xC8	; 200
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	9c 83       	std	Y+4, r25	; 0x04
    3072:	8b 83       	std	Y+3, r24	; 0x03
    3074:	8b 81       	ldd	r24, Y+3	; 0x03
    3076:	9c 81       	ldd	r25, Y+4	; 0x04
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <LCD_displayCharacter+0x89a>
    307c:	9c 83       	std	Y+4, r25	; 0x04
    307e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3080:	8d 81       	ldd	r24, Y+5	; 0x05
    3082:	9e 81       	ldd	r25, Y+6	; 0x06
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	9e 83       	std	Y+6, r25	; 0x06
    3088:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308a:	8d 81       	ldd	r24, Y+5	; 0x05
    308c:	9e 81       	ldd	r25, Y+6	; 0x06
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	69 f7       	brne	.-38     	; 0x306c <LCD_displayCharacter+0x88e>
    3092:	14 c0       	rjmp	.+40     	; 0x30bc <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3094:	6f 81       	ldd	r22, Y+7	; 0x07
    3096:	78 85       	ldd	r23, Y+8	; 0x08
    3098:	89 85       	ldd	r24, Y+9	; 0x09
    309a:	9a 85       	ldd	r25, Y+10	; 0x0a
    309c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	9e 83       	std	Y+6, r25	; 0x06
    30a6:	8d 83       	std	Y+5, r24	; 0x05
    30a8:	8d 81       	ldd	r24, Y+5	; 0x05
    30aa:	9e 81       	ldd	r25, Y+6	; 0x06
    30ac:	9a 83       	std	Y+2, r25	; 0x02
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	9a 81       	ldd	r25, Y+2	; 0x02
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <LCD_displayCharacter+0x8d6>
    30b8:	9a 83       	std	Y+2, r25	; 0x02
    30ba:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    30bc:	cd 59       	subi	r28, 0x9D	; 157
    30be:	df 4f       	sbci	r29, 0xFF	; 255
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	08 95       	ret

000030d4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	00 d0       	rcall	.+0      	; 0x30da <LCD_displayString+0x6>
    30da:	0f 92       	push	r0
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    30e0:	9b 83       	std	Y+3, r25	; 0x03
    30e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30e4:	19 82       	std	Y+1, r1	; 0x01
    30e6:	0e c0       	rjmp	.+28     	; 0x3104 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	9b 81       	ldd	r25, Y+3	; 0x03
    30f2:	fc 01       	movw	r30, r24
    30f4:	e2 0f       	add	r30, r18
    30f6:	f3 1f       	adc	r31, r19
    30f8:	80 81       	ld	r24, Z
    30fa:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayCharacter>
		i++;
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	8f 5f       	subi	r24, 0xFF	; 255
    3102:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	9b 81       	ldd	r25, Y+3	; 0x03
    310e:	fc 01       	movw	r30, r24
    3110:	e2 0f       	add	r30, r18
    3112:	f3 1f       	adc	r31, r19
    3114:	80 81       	ld	r24, Z
    3116:	88 23       	and	r24, r24
    3118:	39 f7       	brne	.-50     	; 0x30e8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	00 d0       	rcall	.+0      	; 0x312c <LCD_moveCursor+0x6>
    312c:	00 d0       	rcall	.+0      	; 0x312e <LCD_moveCursor+0x8>
    312e:	0f 92       	push	r0
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	8a 83       	std	Y+2, r24	; 0x02
    3136:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	28 2f       	mov	r18, r24
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	3d 83       	std	Y+5, r19	; 0x05
    3140:	2c 83       	std	Y+4, r18	; 0x04
    3142:	8c 81       	ldd	r24, Y+4	; 0x04
    3144:	9d 81       	ldd	r25, Y+5	; 0x05
    3146:	81 30       	cpi	r24, 0x01	; 1
    3148:	91 05       	cpc	r25, r1
    314a:	c1 f0       	breq	.+48     	; 0x317c <LCD_moveCursor+0x56>
    314c:	2c 81       	ldd	r18, Y+4	; 0x04
    314e:	3d 81       	ldd	r19, Y+5	; 0x05
    3150:	22 30       	cpi	r18, 0x02	; 2
    3152:	31 05       	cpc	r19, r1
    3154:	2c f4       	brge	.+10     	; 0x3160 <LCD_moveCursor+0x3a>
    3156:	8c 81       	ldd	r24, Y+4	; 0x04
    3158:	9d 81       	ldd	r25, Y+5	; 0x05
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	61 f0       	breq	.+24     	; 0x3176 <LCD_moveCursor+0x50>
    315e:	19 c0       	rjmp	.+50     	; 0x3192 <LCD_moveCursor+0x6c>
    3160:	2c 81       	ldd	r18, Y+4	; 0x04
    3162:	3d 81       	ldd	r19, Y+5	; 0x05
    3164:	22 30       	cpi	r18, 0x02	; 2
    3166:	31 05       	cpc	r19, r1
    3168:	69 f0       	breq	.+26     	; 0x3184 <LCD_moveCursor+0x5e>
    316a:	8c 81       	ldd	r24, Y+4	; 0x04
    316c:	9d 81       	ldd	r25, Y+5	; 0x05
    316e:	83 30       	cpi	r24, 0x03	; 3
    3170:	91 05       	cpc	r25, r1
    3172:	61 f0       	breq	.+24     	; 0x318c <LCD_moveCursor+0x66>
    3174:	0e c0       	rjmp	.+28     	; 0x3192 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	89 83       	std	Y+1, r24	; 0x01
    317a:	0b c0       	rjmp	.+22     	; 0x3192 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	80 5c       	subi	r24, 0xC0	; 192
    3180:	89 83       	std	Y+1, r24	; 0x01
    3182:	07 c0       	rjmp	.+14     	; 0x3192 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	80 5f       	subi	r24, 0xF0	; 240
    3188:	89 83       	std	Y+1, r24	; 0x01
    318a:	03 c0       	rjmp	.+6      	; 0x3192 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    318c:	8b 81       	ldd	r24, Y+3	; 0x03
    318e:	80 5b       	subi	r24, 0xB0	; 176
    3190:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	80 68       	ori	r24, 0x80	; 128
    3196:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_sendCommand>
}
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	08 95       	ret

000031aa <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <LCD_displayStringRowColumn+0x6>
    31b0:	00 d0       	rcall	.+0      	; 0x31b2 <LCD_displayStringRowColumn+0x8>
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	89 83       	std	Y+1, r24	; 0x01
    31b8:	6a 83       	std	Y+2, r22	; 0x02
    31ba:	5c 83       	std	Y+4, r21	; 0x04
    31bc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	6a 81       	ldd	r22, Y+2	; 0x02
    31c2:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    31c6:	8b 81       	ldd	r24, Y+3	; 0x03
    31c8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ca:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <LCD_displayString>
}
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	62 97       	sbiw	r28, 0x12	; 18
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	9a 8b       	std	Y+18, r25	; 0x12
    31f2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    31f4:	89 89       	ldd	r24, Y+17	; 0x11
    31f6:	9a 89       	ldd	r25, Y+18	; 0x12
    31f8:	9e 01       	movw	r18, r28
    31fa:	2f 5f       	subi	r18, 0xFF	; 255
    31fc:	3f 4f       	sbci	r19, 0xFF	; 255
    31fe:	b9 01       	movw	r22, r18
    3200:	4a e0       	ldi	r20, 0x0A	; 10
    3202:	50 e0       	ldi	r21, 0x00	; 0
    3204:	0e 94 2f 1b 	call	0x365e	; 0x365e <itoa>
   LCD_displayString(buff); /* Display the string */
    3208:	ce 01       	movw	r24, r28
    320a:	01 96       	adiw	r24, 0x01	; 1
    320c:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <LCD_displayString>
}
    3210:	62 96       	adiw	r28, 0x12	; 18
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	f8 94       	cli
    3216:	de bf       	out	0x3e, r29	; 62
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	cd bf       	out	0x3d, r28	; 61
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_sendCommand>
}
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <__vector_7>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect) {
    3236:	1f 92       	push	r1
    3238:	0f 92       	push	r0
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	0f 92       	push	r0
    323e:	11 24       	eor	r1, r1
    3240:	2f 93       	push	r18
    3242:	3f 93       	push	r19
    3244:	4f 93       	push	r20
    3246:	5f 93       	push	r21
    3248:	6f 93       	push	r22
    324a:	7f 93       	push	r23
    324c:	8f 93       	push	r24
    324e:	9f 93       	push	r25
    3250:	af 93       	push	r26
    3252:	bf 93       	push	r27
    3254:	ef 93       	push	r30
    3256:	ff 93       	push	r31
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    3260:	80 91 0a 01 	lds	r24, 0x010A
    3264:	90 91 0b 01 	lds	r25, 0x010B
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	29 f0       	breq	.+10     	; 0x3276 <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    326c:	e0 91 0a 01 	lds	r30, 0x010A
    3270:	f0 91 0b 01 	lds	r31, 0x010B
    3274:	09 95       	icall
	}
}
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	ff 91       	pop	r31
    327c:	ef 91       	pop	r30
    327e:	bf 91       	pop	r27
    3280:	af 91       	pop	r26
    3282:	9f 91       	pop	r25
    3284:	8f 91       	pop	r24
    3286:	7f 91       	pop	r23
    3288:	6f 91       	pop	r22
    328a:	5f 91       	pop	r21
    328c:	4f 91       	pop	r20
    328e:	3f 91       	pop	r19
    3290:	2f 91       	pop	r18
    3292:	0f 90       	pop	r0
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	0f 90       	pop	r0
    3298:	1f 90       	pop	r1
    329a:	18 95       	reti

0000329c <Timer1_init>:
/*
 * Description : Function to initialize Timer 1 driver
 * Inputs: pointer to the configuration structure with type Timer1_ConfigType
 * Return: None
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <Timer1_init+0x6>
    32a2:	00 d0       	rcall	.+0      	; 0x32a4 <Timer1_init+0x8>
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	9a 83       	std	Y+2, r25	; 0x02
    32aa:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value; /* Set Timer1 initial value */
    32ac:	ac e4       	ldi	r26, 0x4C	; 76
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	e9 81       	ldd	r30, Y+1	; 0x01
    32b2:	fa 81       	ldd	r31, Y+2	; 0x02
    32b4:	80 81       	ld	r24, Z
    32b6:	91 81       	ldd	r25, Z+1	; 0x01
    32b8:	11 96       	adiw	r26, 0x01	; 1
    32ba:	9c 93       	st	X, r25
    32bc:	8e 93       	st	-X, r24
	 * 1. Set waveform generation mode to CTC (Clear timer on compare match) WGM12 =1
	 * 2. Set compare output to toggle OC01 on compare watch COM1A0 =1
	 * 3. Set the pre-scalar to 1024
	 * */

	TCCR1A = (1 << FOC1A) | (1 << FOC1B) | (1 << COM1A1);
    32be:	ef e4       	ldi	r30, 0x4F	; 79
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	8c e8       	ldi	r24, 0x8C	; 140
    32c4:	80 83       	st	Z, r24

	switch (Config_Ptr->mode) {
    32c6:	e9 81       	ldd	r30, Y+1	; 0x01
    32c8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ca:	86 81       	ldd	r24, Z+6	; 0x06
    32cc:	28 2f       	mov	r18, r24
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	3c 83       	std	Y+4, r19	; 0x04
    32d2:	2b 83       	std	Y+3, r18	; 0x03
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	9c 81       	ldd	r25, Y+4	; 0x04
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	31 f0       	breq	.+12     	; 0x32e8 <Timer1_init+0x4c>
    32dc:	2b 81       	ldd	r18, Y+3	; 0x03
    32de:	3c 81       	ldd	r19, Y+4	; 0x04
    32e0:	21 30       	cpi	r18, 0x01	; 1
    32e2:	31 05       	cpc	r19, r1
    32e4:	a9 f0       	breq	.+42     	; 0x3310 <Timer1_init+0x74>
    32e6:	41 c0       	rjmp	.+130    	; 0x336a <Timer1_init+0xce>
	case NORMAL:
		TCCR1A = (TCCR1A & 0xFC) | (Config_Ptr->mode);
    32e8:	af e4       	ldi	r26, 0x4F	; 79
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	ef e4       	ldi	r30, 0x4F	; 79
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	98 2f       	mov	r25, r24
    32f4:	9c 7f       	andi	r25, 0xFC	; 252
    32f6:	e9 81       	ldd	r30, Y+1	; 0x01
    32f8:	fa 81       	ldd	r31, Y+2	; 0x02
    32fa:	86 81       	ldd	r24, Z+6	; 0x06
    32fc:	89 2b       	or	r24, r25
    32fe:	8c 93       	st	X, r24
		TIMSK |= (1 << TOIE1);
    3300:	a9 e5       	ldi	r26, 0x59	; 89
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	e9 e5       	ldi	r30, 0x59	; 89
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	84 60       	ori	r24, 0x04	; 4
    330c:	8c 93       	st	X, r24
    330e:	2d c0       	rjmp	.+90     	; 0x336a <Timer1_init+0xce>
		break;

	case COMPARE:
		TCCR1B = (TCCR1B & 0xE7) | (Config_Ptr->mode << 1);
    3310:	ae e4       	ldi	r26, 0x4E	; 78
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	ee e4       	ldi	r30, 0x4E	; 78
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	80 81       	ld	r24, Z
    331a:	28 2f       	mov	r18, r24
    331c:	27 7e       	andi	r18, 0xE7	; 231
    331e:	e9 81       	ldd	r30, Y+1	; 0x01
    3320:	fa 81       	ldd	r31, Y+2	; 0x02
    3322:	86 81       	ldd	r24, Z+6	; 0x06
    3324:	88 2f       	mov	r24, r24
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	88 0f       	add	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	82 2b       	or	r24, r18
    332e:	8c 93       	st	X, r24
		/* Set compare value */
		OCR1A = Config_Ptr->compare_value;
    3330:	aa e4       	ldi	r26, 0x4A	; 74
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	e9 81       	ldd	r30, Y+1	; 0x01
    3336:	fa 81       	ldd	r31, Y+2	; 0x02
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	93 81       	ldd	r25, Z+3	; 0x03
    333c:	11 96       	adiw	r26, 0x01	; 1
    333e:	9c 93       	st	X, r25
    3340:	8e 93       	st	-X, r24
		/* Enable Compare Match A Interrupt */
		TIMSK |= (1 << OCIE1A);
    3342:	a9 e5       	ldi	r26, 0x59	; 89
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	e9 e5       	ldi	r30, 0x59	; 89
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	80 61       	ori	r24, 0x10	; 16
    334e:	8c 93       	st	X, r24
		/* Configure the pre-scalar for TIMER1 */
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    3350:	ae e4       	ldi	r26, 0x4E	; 78
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	ee e4       	ldi	r30, 0x4E	; 78
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	28 2f       	mov	r18, r24
    335c:	28 7f       	andi	r18, 0xF8	; 248
    335e:	e9 81       	ldd	r30, Y+1	; 0x01
    3360:	fa 81       	ldd	r31, Y+2	; 0x02
    3362:	84 81       	ldd	r24, Z+4	; 0x04
    3364:	95 81       	ldd	r25, Z+5	; 0x05
    3366:	82 2b       	or	r24, r18
    3368:	8c 93       	st	X, r24
		break;
	}
}
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	cf 91       	pop	r28
    3374:	df 91       	pop	r29
    3376:	08 95       	ret

00003378 <Timer1_deInit>:

/* Description: Function to disable the Timer1.
 * Inputs: None
 * Return: None
 */
void Timer1_deInit(void) {
    3378:	df 93       	push	r29
    337a:	cf 93       	push	r28
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62
	/* Clear initial value and reset all bits of Timer1 registers*/
	TCNT1 = 0;
    3380:	ec e4       	ldi	r30, 0x4C	; 76
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	11 82       	std	Z+1, r1	; 0x01
    3386:	10 82       	st	Z, r1
	TCCR1A = 0x00;
    3388:	ef e4       	ldi	r30, 0x4F	; 79
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	10 82       	st	Z, r1
	TCCR1B = 0x00;
    338e:	ee e4       	ldi	r30, 0x4E	; 78
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	10 82       	st	Z, r1

	/* Disable all Input Capture interrupts */
	TIMSK = 0x3C;
    3394:	e9 e5       	ldi	r30, 0x59	; 89
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	8c e3       	ldi	r24, 0x3C	; 60
    339a:	80 83       	st	Z, r24

}
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	08 95       	ret

000033a2 <Timer1_setCallBack>:

/* Description: Function to set the Call Back function address.
 * Inputs: pointer to Call Back function.
 * Return: None
 */
void Timer1_setCallBack(void (*a_ptr)(void)) {
    33a2:	df 93       	push	r29
    33a4:	cf 93       	push	r28
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <Timer1_setCallBack+0x6>
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	9a 83       	std	Y+2, r25	; 0x02
    33ae:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	9a 81       	ldd	r25, Y+2	; 0x02
    33b4:	90 93 0b 01 	sts	0x010B, r25
    33b8:	80 93 0a 01 	sts	0x010A, r24
}
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	08 95       	ret

000033c6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	00 d0       	rcall	.+0      	; 0x33cc <UART_init+0x6>
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <UART_init+0x8>
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
    33d2:	9c 83       	std	Y+4, r25	; 0x04
    33d4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    33d6:	1a 82       	std	Y+2, r1	; 0x02
    33d8:	19 82       	std	Y+1, r1	; 0x01

	/*Enable double transmission speed */
	UCSRA = (1<<U2X);
    33da:	eb e2       	ldi	r30, 0x2B	; 43
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	82 e0       	ldi	r24, 0x02	; 2
    33e0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    33e2:	ea e2       	ldi	r30, 0x2A	; 42
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	88 e1       	ldi	r24, 0x18	; 24
    33e8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data & 0x0B)<<UCSZ1);
    33ea:	a0 e4       	ldi	r26, 0x40	; 64
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	eb 81       	ldd	r30, Y+3	; 0x03
    33f0:	fc 81       	ldd	r31, Y+4	; 0x04
    33f2:	80 81       	ld	r24, Z
    33f4:	88 2f       	mov	r24, r24
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	8b 70       	andi	r24, 0x0B	; 11
    33fa:	90 70       	andi	r25, 0x00	; 0
    33fc:	88 0f       	add	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	88 0f       	add	r24, r24
    3402:	99 1f       	adc	r25, r25
    3404:	80 68       	ori	r24, 0x80	; 128
    3406:	8c 93       	st	X, r24
	/* 9-bit character size configuration */
	if (Config_Ptr->bit_data == NINE){
    3408:	eb 81       	ldd	r30, Y+3	; 0x03
    340a:	fc 81       	ldd	r31, Y+4	; 0x04
    340c:	80 81       	ld	r24, Z
    340e:	87 30       	cpi	r24, 0x07	; 7
    3410:	39 f4       	brne	.+14     	; 0x3420 <UART_init+0x5a>
		UCSRB |= (1<< UCSZ2);
    3412:	aa e2       	ldi	r26, 0x2A	; 42
    3414:	b0 e0       	ldi	r27, 0x00	; 0
    3416:	ea e2       	ldi	r30, 0x2A	; 42
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	80 81       	ld	r24, Z
    341c:	84 60       	ori	r24, 0x04	; 4
    341e:	8c 93       	st	X, r24
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudrate * 8UL))) - 1);
    3420:	eb 81       	ldd	r30, Y+3	; 0x03
    3422:	fc 81       	ldd	r31, Y+4	; 0x04
    3424:	83 81       	ldd	r24, Z+3	; 0x03
    3426:	88 2f       	mov	r24, r24
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	a0 e0       	ldi	r26, 0x00	; 0
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	88 0f       	add	r24, r24
    3430:	99 1f       	adc	r25, r25
    3432:	aa 1f       	adc	r26, r26
    3434:	bb 1f       	adc	r27, r27
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	aa 1f       	adc	r26, r26
    343c:	bb 1f       	adc	r27, r27
    343e:	88 0f       	add	r24, r24
    3440:	99 1f       	adc	r25, r25
    3442:	aa 1f       	adc	r26, r26
    3444:	bb 1f       	adc	r27, r27
    3446:	9c 01       	movw	r18, r24
    3448:	ad 01       	movw	r20, r26
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	92 e1       	ldi	r25, 0x12	; 18
    344e:	aa e7       	ldi	r26, 0x7A	; 122
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	bc 01       	movw	r22, r24
    3454:	cd 01       	movw	r24, r26
    3456:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__udivmodsi4>
    345a:	da 01       	movw	r26, r20
    345c:	c9 01       	movw	r24, r18
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	9a 83       	std	Y+2, r25	; 0x02
    3462:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3464:	e0 e4       	ldi	r30, 0x40	; 64
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	9a 81       	ldd	r25, Y+2	; 0x02
    346c:	89 2f       	mov	r24, r25
    346e:	99 27       	eor	r25, r25
    3470:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3472:	e9 e2       	ldi	r30, 0x29	; 41
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	80 83       	st	Z, r24
}
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	cf 91       	pop	r28
    3484:	df 91       	pop	r29
    3486:	08 95       	ret

00003488 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	0f 92       	push	r0
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3494:	eb e2       	ldi	r30, 0x2B	; 43
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	80 81       	ld	r24, Z
    349a:	88 2f       	mov	r24, r24
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	80 72       	andi	r24, 0x20	; 32
    34a0:	90 70       	andi	r25, 0x00	; 0
    34a2:	00 97       	sbiw	r24, 0x00	; 0
    34a4:	b9 f3       	breq	.-18     	; 0x3494 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    34a6:	ec e2       	ldi	r30, 0x2C	; 44
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    34ae:	0f 90       	pop	r0
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    34be:	eb e2       	ldi	r30, 0x2B	; 43
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	80 81       	ld	r24, Z
    34c4:	88 23       	and	r24, r24
    34c6:	dc f7       	brge	.-10     	; 0x34be <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    34c8:	ec e2       	ldi	r30, 0x2C	; 44
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	80 81       	ld	r24, Z
}
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <UART_sendString+0x6>
    34da:	0f 92       	push	r0
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	9b 83       	std	Y+3, r25	; 0x03
    34e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34e4:	19 82       	std	Y+1, r1	; 0x01
    34e6:	0e c0       	rjmp	.+28     	; 0x3504 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	fc 01       	movw	r30, r24
    34f4:	e2 0f       	add	r30, r18
    34f6:	f3 1f       	adc	r31, r19
    34f8:	80 81       	ld	r24, Z
    34fa:	0e 94 44 1a 	call	0x3488	; 0x3488 <UART_sendByte>
		i++;
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	8f 5f       	subi	r24, 0xFF	; 255
    3502:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	28 2f       	mov	r18, r24
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	9b 81       	ldd	r25, Y+3	; 0x03
    350e:	fc 01       	movw	r30, r24
    3510:	e2 0f       	add	r30, r18
    3512:	f3 1f       	adc	r31, r19
    3514:	80 81       	ld	r24, Z
    3516:	88 23       	and	r24, r24
    3518:	39 f7       	brne	.-50     	; 0x34e8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	08 95       	ret

00003526 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3526:	0f 93       	push	r16
    3528:	1f 93       	push	r17
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	00 d0       	rcall	.+0      	; 0x3530 <UART_receiveString+0xa>
    3530:	0f 92       	push	r0
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	9b 83       	std	Y+3, r25	; 0x03
    3538:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    353a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    353c:	89 81       	ldd	r24, Y+1	; 0x01
    353e:	28 2f       	mov	r18, r24
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	8a 81       	ldd	r24, Y+2	; 0x02
    3544:	9b 81       	ldd	r25, Y+3	; 0x03
    3546:	8c 01       	movw	r16, r24
    3548:	02 0f       	add	r16, r18
    354a:	13 1f       	adc	r17, r19
    354c:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <UART_recieveByte>
    3550:	f8 01       	movw	r30, r16
    3552:	80 83       	st	Z, r24
    3554:	0f c0       	rjmp	.+30     	; 0x3574 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	8f 5f       	subi	r24, 0xFF	; 255
    355a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	28 2f       	mov	r18, r24
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	9b 81       	ldd	r25, Y+3	; 0x03
    3566:	8c 01       	movw	r16, r24
    3568:	02 0f       	add	r16, r18
    356a:	13 1f       	adc	r17, r19
    356c:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <UART_recieveByte>
    3570:	f8 01       	movw	r30, r16
    3572:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	28 2f       	mov	r18, r24
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	9b 81       	ldd	r25, Y+3	; 0x03
    357e:	fc 01       	movw	r30, r24
    3580:	e2 0f       	add	r30, r18
    3582:	f3 1f       	adc	r31, r19
    3584:	80 81       	ld	r24, Z
    3586:	83 32       	cpi	r24, 0x23	; 35
    3588:	31 f7       	brne	.-52     	; 0x3556 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	28 2f       	mov	r18, r24
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	9b 81       	ldd	r25, Y+3	; 0x03
    3594:	fc 01       	movw	r30, r24
    3596:	e2 0f       	add	r30, r18
    3598:	f3 1f       	adc	r31, r19
    359a:	10 82       	st	Z, r1
}
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	08 95       	ret

000035ac <__udivmodsi4>:
    35ac:	a1 e2       	ldi	r26, 0x21	; 33
    35ae:	1a 2e       	mov	r1, r26
    35b0:	aa 1b       	sub	r26, r26
    35b2:	bb 1b       	sub	r27, r27
    35b4:	fd 01       	movw	r30, r26
    35b6:	0d c0       	rjmp	.+26     	; 0x35d2 <__udivmodsi4_ep>

000035b8 <__udivmodsi4_loop>:
    35b8:	aa 1f       	adc	r26, r26
    35ba:	bb 1f       	adc	r27, r27
    35bc:	ee 1f       	adc	r30, r30
    35be:	ff 1f       	adc	r31, r31
    35c0:	a2 17       	cp	r26, r18
    35c2:	b3 07       	cpc	r27, r19
    35c4:	e4 07       	cpc	r30, r20
    35c6:	f5 07       	cpc	r31, r21
    35c8:	20 f0       	brcs	.+8      	; 0x35d2 <__udivmodsi4_ep>
    35ca:	a2 1b       	sub	r26, r18
    35cc:	b3 0b       	sbc	r27, r19
    35ce:	e4 0b       	sbc	r30, r20
    35d0:	f5 0b       	sbc	r31, r21

000035d2 <__udivmodsi4_ep>:
    35d2:	66 1f       	adc	r22, r22
    35d4:	77 1f       	adc	r23, r23
    35d6:	88 1f       	adc	r24, r24
    35d8:	99 1f       	adc	r25, r25
    35da:	1a 94       	dec	r1
    35dc:	69 f7       	brne	.-38     	; 0x35b8 <__udivmodsi4_loop>
    35de:	60 95       	com	r22
    35e0:	70 95       	com	r23
    35e2:	80 95       	com	r24
    35e4:	90 95       	com	r25
    35e6:	9b 01       	movw	r18, r22
    35e8:	ac 01       	movw	r20, r24
    35ea:	bd 01       	movw	r22, r26
    35ec:	cf 01       	movw	r24, r30
    35ee:	08 95       	ret

000035f0 <__prologue_saves__>:
    35f0:	2f 92       	push	r2
    35f2:	3f 92       	push	r3
    35f4:	4f 92       	push	r4
    35f6:	5f 92       	push	r5
    35f8:	6f 92       	push	r6
    35fa:	7f 92       	push	r7
    35fc:	8f 92       	push	r8
    35fe:	9f 92       	push	r9
    3600:	af 92       	push	r10
    3602:	bf 92       	push	r11
    3604:	cf 92       	push	r12
    3606:	df 92       	push	r13
    3608:	ef 92       	push	r14
    360a:	ff 92       	push	r15
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	ca 1b       	sub	r28, r26
    361a:	db 0b       	sbc	r29, r27
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	09 94       	ijmp

00003628 <__epilogue_restores__>:
    3628:	2a 88       	ldd	r2, Y+18	; 0x12
    362a:	39 88       	ldd	r3, Y+17	; 0x11
    362c:	48 88       	ldd	r4, Y+16	; 0x10
    362e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3630:	6e 84       	ldd	r6, Y+14	; 0x0e
    3632:	7d 84       	ldd	r7, Y+13	; 0x0d
    3634:	8c 84       	ldd	r8, Y+12	; 0x0c
    3636:	9b 84       	ldd	r9, Y+11	; 0x0b
    3638:	aa 84       	ldd	r10, Y+10	; 0x0a
    363a:	b9 84       	ldd	r11, Y+9	; 0x09
    363c:	c8 84       	ldd	r12, Y+8	; 0x08
    363e:	df 80       	ldd	r13, Y+7	; 0x07
    3640:	ee 80       	ldd	r14, Y+6	; 0x06
    3642:	fd 80       	ldd	r15, Y+5	; 0x05
    3644:	0c 81       	ldd	r16, Y+4	; 0x04
    3646:	1b 81       	ldd	r17, Y+3	; 0x03
    3648:	aa 81       	ldd	r26, Y+2	; 0x02
    364a:	b9 81       	ldd	r27, Y+1	; 0x01
    364c:	ce 0f       	add	r28, r30
    364e:	d1 1d       	adc	r29, r1
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
    365a:	ed 01       	movw	r28, r26
    365c:	08 95       	ret

0000365e <itoa>:
    365e:	fb 01       	movw	r30, r22
    3660:	9f 01       	movw	r18, r30
    3662:	e8 94       	clt
    3664:	42 30       	cpi	r20, 0x02	; 2
    3666:	c4 f0       	brlt	.+48     	; 0x3698 <itoa+0x3a>
    3668:	45 32       	cpi	r20, 0x25	; 37
    366a:	b4 f4       	brge	.+44     	; 0x3698 <itoa+0x3a>
    366c:	4a 30       	cpi	r20, 0x0A	; 10
    366e:	29 f4       	brne	.+10     	; 0x367a <itoa+0x1c>
    3670:	97 fb       	bst	r25, 7
    3672:	1e f4       	brtc	.+6      	; 0x367a <itoa+0x1c>
    3674:	90 95       	com	r25
    3676:	81 95       	neg	r24
    3678:	9f 4f       	sbci	r25, 0xFF	; 255
    367a:	64 2f       	mov	r22, r20
    367c:	77 27       	eor	r23, r23
    367e:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__udivmodhi4>
    3682:	80 5d       	subi	r24, 0xD0	; 208
    3684:	8a 33       	cpi	r24, 0x3A	; 58
    3686:	0c f0       	brlt	.+2      	; 0x368a <itoa+0x2c>
    3688:	89 5d       	subi	r24, 0xD9	; 217
    368a:	81 93       	st	Z+, r24
    368c:	cb 01       	movw	r24, r22
    368e:	00 97       	sbiw	r24, 0x00	; 0
    3690:	a1 f7       	brne	.-24     	; 0x367a <itoa+0x1c>
    3692:	16 f4       	brtc	.+4      	; 0x3698 <itoa+0x3a>
    3694:	5d e2       	ldi	r21, 0x2D	; 45
    3696:	51 93       	st	Z+, r21
    3698:	10 82       	st	Z, r1
    369a:	c9 01       	movw	r24, r18
    369c:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <strrev>

000036a0 <strrev>:
    36a0:	dc 01       	movw	r26, r24
    36a2:	fc 01       	movw	r30, r24
    36a4:	67 2f       	mov	r22, r23
    36a6:	71 91       	ld	r23, Z+
    36a8:	77 23       	and	r23, r23
    36aa:	e1 f7       	brne	.-8      	; 0x36a4 <strrev+0x4>
    36ac:	32 97       	sbiw	r30, 0x02	; 2
    36ae:	04 c0       	rjmp	.+8      	; 0x36b8 <strrev+0x18>
    36b0:	7c 91       	ld	r23, X
    36b2:	6d 93       	st	X+, r22
    36b4:	70 83       	st	Z, r23
    36b6:	62 91       	ld	r22, -Z
    36b8:	ae 17       	cp	r26, r30
    36ba:	bf 07       	cpc	r27, r31
    36bc:	c8 f3       	brcs	.-14     	; 0x36b0 <strrev+0x10>
    36be:	08 95       	ret

000036c0 <__udivmodhi4>:
    36c0:	aa 1b       	sub	r26, r26
    36c2:	bb 1b       	sub	r27, r27
    36c4:	51 e1       	ldi	r21, 0x11	; 17
    36c6:	07 c0       	rjmp	.+14     	; 0x36d6 <__udivmodhi4_ep>

000036c8 <__udivmodhi4_loop>:
    36c8:	aa 1f       	adc	r26, r26
    36ca:	bb 1f       	adc	r27, r27
    36cc:	a6 17       	cp	r26, r22
    36ce:	b7 07       	cpc	r27, r23
    36d0:	10 f0       	brcs	.+4      	; 0x36d6 <__udivmodhi4_ep>
    36d2:	a6 1b       	sub	r26, r22
    36d4:	b7 0b       	sbc	r27, r23

000036d6 <__udivmodhi4_ep>:
    36d6:	88 1f       	adc	r24, r24
    36d8:	99 1f       	adc	r25, r25
    36da:	5a 95       	dec	r21
    36dc:	a9 f7       	brne	.-22     	; 0x36c8 <__udivmodhi4_loop>
    36de:	80 95       	com	r24
    36e0:	90 95       	com	r25
    36e2:	bc 01       	movw	r22, r24
    36e4:	cd 01       	movw	r24, r26
    36e6:	08 95       	ret

000036e8 <_exit>:
    36e8:	f8 94       	cli

000036ea <__stop_program>:
    36ea:	ff cf       	rjmp	.-2      	; 0x36ea <__stop_program>
